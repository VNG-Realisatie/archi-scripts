/**
 * clean a copy of the GEMMA model
 * start with a copy of the GEMMA model and remove all view, elements, relations and folder not relevant to the project
 *
 * see: https://redactie.gemmaonline.nl/index.php/GEMMA_Kernmodel_en_Projectarchitecturen#Synchroon_houden_GEMMA_en_projectarchitectuur
 *
 * Usage:
 * - specify a projectmodel in the GEMMA model
 *    - create in the views folder a folder with the name of the project
 *    - in this folder create views with all the elements which are part of the project
 * - save a copy of the GEMMA model with the name of the project
 * - in the copy
 *   - select the created project folder with one or more views
 *   - run this script
 * - check result and save
 * - the file is the start of your projectmodel or merge with your version controlled projectmodel
 *
 * What this script does
 * - change model properties
 *   - name: model name => selected project folder name
 *   - type model: kernmodel => projectmodel
 *   - generate new Object ID
 * - delete all views not in the project folder
 * - delete all elements which are not on a view in the project folder
 * - delete empty folders
 */

const PROP_ID = "Object ID";
const MODEL_TYPE = "Type model";

load(__DIR__ + "../_lib/Common.js");

initConsoleLog(__FILE__, true);
try {
  let projectFolder = $(selection).filter("folder");
  if (projectFolder.size() == 1) {
    saveProjectArchitecture(projectFolder.first());
  } else {
    console.log("Select one folder with views containing all the elements of the project architecture");
  }
} catch (error) {
  console.error(`> ${typeof error.stack == "undefined" ? error : error.stack}`);
}
finishConsoleLog();

function saveProjectArchitecture(projectFolder) {
  // change model properties
  model.name = projectFolder.name;
  model.prop(PROP_ID, generateUUID());
  model.prop(MODEL_TYPE, "Projectmodel");

  // delete all views not in folder
  projectViews = selectObjects(projectFolder, "view");
  viewsToDelete = $("view").not(projectViews);
  console.log(`Keep folder with ${projectViews.size()} project views`);
  console.log(`Deleting ${viewsToDelete.size()} views`);
  viewsToDelete.each((v) => {
    console.log(` - ${v.name}`);
    v.delete();
  });

  // delete elements not on a view
  elementsToDelete = $("element").filter((e) => $(e).viewRefs().size() == 0);
  console.log(`Deleting ${elementsToDelete.size()} unused (not drawn on a view) elements`);
  elementsToDelete.each((e) => {
    console.log(` - ${e}`);
    e.delete();
  });

  // delete empty folders
  let nrFoldersStart = $(model).find("folder").size();
  console.log(`Deleting empty folders`);
  deleteEmptyFolders($(model).first());
  let nrFoldersRemaining = $(model).find("folder").size();
  console.log();
  console.log(`Deleted ${nrFoldersStart - nrFoldersRemaining} empty folders of total of ${nrFoldersStart} folders`);
}

/**
 * deleteEmptyFolders
 * 	recursive function to traverse hierarchical tree of folders
 * 	test for empty folders
 *
 * @param pFolder - current folderobject to traverse. For root folder, use $(model).first()
 * @param pLevel - current level of recursion
 */
function deleteEmptyFolders(pFolder, pLevel = 0) {
  // stop if folder has no subfolders
  let subFolders = $(pFolder).children("folder");
  if (subFolders.size() == 0) return;

  console.log(`${"  ".repeat(pLevel)}> ${pFolder.name != "" ? pFolder.name : `## no name ##`}`);

  subFolders.each(function (subFolder) {
    deleteEmptyFolders(subFolder, pLevel + 1);

    // delete current folder, if it is empty
    if ($(subFolder).children().size() == 0 && pLevel > 0) {
      console.log(`${"  ".repeat(pLevel)}> ** delete **  ${subFolder.name != "" ? subFolder.name : `## no name ##`}`);
      subFolder.delete();
    }
  });
}

/**
 * generateUUID()
 * 	return a generated UUID
 * 	from : https://stackoverflow.com/questions/105034/how-to-create-guid-uuid
 */
function generateUUID() {
  // Public Domain/MIT
  var d = new Date().getTime(); //Timestamp
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
    var r = Math.random() * 16; //random number between 0 and 16
    r = (d + r) % 16 | 0;
    d = Math.floor(d / 16);
    return (c === "x" ? r : (r & 0x3) | 0x8).toString(16);
  });
}

/**
 * create a collection with the selected objects.
 *
 * @param {string} selector - Archi selector - type of objects to select
 */
function selectObjects(pSelection, selector) {
  if (model == null || model.id == null)
    throw "Nothing selected. Select one or more objects in the model tree or a view";

  // create an empty collection
  var selectedColl = $();
  $(pSelection).each((obj) => addObjectInList(obj, selector, selectedColl));

  console.log(`\nSelection:`);
  console.log(`- ${selectedColl.length} ${selector}s selected`);

  return selectedColl;
}

/**
 * recursive function
 *   add the selected object to a collection.
 *   if the object is a container (model, view or folder), all contained objects are added
 */
function addObjectInList(obj, selector, coll) {
  if ($(obj).is(selector)) {
    let o = obj;
    if (selector != "view") o = concept(obj);
    // check for duplicates, than add element to the list
    if (coll.filter((a) => a.id == o.id).size() == 0) {
      coll.add(o);
    }
    // if (coll.findIndex((a) => a.id == o.id) == -1) coll.push(o);
  }
  $(obj)
    .children()
    .each((child) => addObjectInList(child, selector, coll));
  return coll;
}

function concept(o) {
  return o.concept ? o.concept : o;
}
