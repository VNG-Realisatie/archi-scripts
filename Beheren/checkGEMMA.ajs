/**
 * Controleer architectuurmodel op GEMMA eigenschappen
 *
 * Doe deze controle
 * - voor een release naar GEMMA online
 * - voor het analyseren van GEMMA online importfouten
 * - voor testen van de SWC list API
 */

const GEMMA_PUBLICEREN = [
  "Niet",
  "Redactie",
  "GEMMA Online en redactie",
  "Softwarecatalogus en GEMMA Online en redactie",
];

const GEMMA_STATUS = ["In gebruik", "Einde ondersteuning", "In ontwikkeling", "Teruggetrokken"];

const ARCHIMATE_TYPE = 0;
const GEMMA_TYPE = 1;
const GEMMA_ELEMENT_TYPES = [
  ["business-function", "Bedrijfsfunctie domein"],
  ["business-function", "Bedrijfsfunctie laag"],
  ["business-function", "Bedrijfsfunctie"],
  ["application-component", "Referentiecomponent"],
  ["application-component", "Buitengemeentelijke voorziening"],
  ["constraint", "Standaard"],
  ["constraint", "Standaardversie"],
];

const GEMMA_VIEW = [["view", "Contentfilter"]];

const SWC_API = [["application-component", "Referentiecomponent"]];

let script_name = __FILE__.replace(/^.*[\\\/]/, "");
console.show();
// console.clear();
console.log(`\nRunning script "${script_name}"...\n`);

try {
  printArchiObject(model);

  console.log("\nImporteren tellingen");

  let gemmaColl = {};
  GEMMA_ELEMENT_TYPES.forEach((typeRow, i) => {
    console.log(`${i}) ${typeRow[GEMMA_TYPE]}:`);
    gemmaColl[typeRow[GEMMA_TYPE]] = $(typeRow[ARCHIMATE_TYPE]).filter(
      (e) => e.prop("GEMMA type") == typeRow[GEMMA_TYPE]
    );
    console.log(`  model - ${gemmaColl[typeRow[GEMMA_TYPE]].size()} ${typeRow[GEMMA_TYPE]}`);

    pubColl = {};
    GEMMA_PUBLICEREN.forEach((pubValue, j) => {
      console.log(`  ${j}) ${pubValue}:`);
      pubColl[pubValue] = gemmaColl[typeRow[GEMMA_TYPE]].filter(
        (e) => publicerenFilter(e) >= GEMMA_PUBLICEREN.indexOf(pubValue)
      );

      console.log(`  - ${pubColl[pubValue].size()} ${typeRow[GEMMA_TYPE]}`);
      if (j > 0) {
        let pubCollDiff = pubColl[GEMMA_PUBLICEREN[j - 1]].not(pubColl[pubValue]);
        if (pubCollDiff.size() > 0) {
          console.log(`  - Weggelaten uit ${GEMMA_PUBLICEREN[j - 1]}:`);
          if (pubColl[pubValue].size() == 0) console.log(`    - Rest`);
          else pubCollDiff.forEach((r) => console.log(`    - ${r}`));
        }
      }
    });
  });

  console.log("\nReferentiecomponent tellingen");
  console.log(`- ${$("application-component").size()} application-component`);
  console.log(
    `- ${$("application-component")
      .filter((e) => e.prop("GEMMA type") == "Referentiecomponent")
      .size()} Referentiecomponent`
  );
  console.log(
    `- ${$("application-component")
      .filter((e) => e.prop("GEMMA type") == "Referentiecomponent")
      .filter((e) => e.prop("GEMMA status") == "In gebruik")
      .size()} Referentiecomponent In gebruik`
  );

  console.log("\nWaar referentiecomponenten publiceren");
  let refCompColl = {};
  GEMMA_PUBLICEREN.forEach((value, i) => {
    console.log(`${i}) ${value}:`);
    gemmaColl[value] = $("application-component")
      .filter((e) => e.prop("GEMMA type") == "Referentiecomponent")
      .filter((e) => e.prop("GEMMA status") == "In gebruik")
      .filter((e) => publicerenFilter(e) >= GEMMA_PUBLICEREN.indexOf(value));

    console.log(`  - ${gemmaColl[value].size()} referentiecomponent`);
    if (i > 0) {
      let refCompDiff = gemmaColl[GEMMA_PUBLICEREN[i - 1]].not(gemmaColl[GEMMA_PUBLICEREN[i]]);
      if (refCompDiff.size() > 0) {
        console.log(`  - Weggelaten uit ${GEMMA_PUBLICEREN[i - 1]}:`);
        refCompDiff.forEach((r) => console.log(`    - ${r}`));
      }
    }
  });
} catch (error) {
  console.error(`> ${typeof error.stack == "undefined" ? error : error.stack}`);
}
console.log(`\nScript "${script_name}" finished`);
console.log("==========================================\n");

function publicerenFilter(e) {
  let maxPublicerenIndex = 0;
  // console.log(`- ${e.name}`);
  $(e)
    .viewRefs()
    .each(function (v) {
      let publicerenIndex = GEMMA_PUBLICEREN.indexOf(`${v.prop("Publiceren")}`);
      if (publicerenIndex > maxPublicerenIndex) maxPublicerenIndex = publicerenIndex;
      // console.log(`   - ${v.name} [Publiceren = ${v.prop("Publiceren")}]`);
    });

  // console.log(`   - Publiceren=${GEMMA_PUBLICEREN[maxPublicerenIndex]}`);
  return maxPublicerenIndex;
}

function printArchiObject(obj) {
  load("https://unpkg.com/ascii-table/ascii-table.min.js");
  let table = new AsciiTable(`${obj}`);
  // table.setHeading("Property", "Value");
  obj.prop().forEach((p) => table.addRow(p, obj.prop(p)));
  // obj.prop().forEach((p) => console.log(`- ${p}: \t${obj.prop(p)}`));
  console.log(table.toString());
}

function plotGEMMAstatus(obj) {
  if (!(obj.prop("GEMMA status") == "In gebruik" || obj.prop("GEMMA status") == null)) {
    let note = obj.createObject("note", 10, 30, 160, 25);
    note.fontSize = obj.fontSize - 1;
    note.text = `GEMMA status: ${obj.prop("GEMMA status")}`;
    note.fillColor = "#ff9999";
    console.log(`- ${obj.name}: ${note.text}`);
  }
}

function plotStandaardStatus(obj) {
  if (!(obj.prop("Status") == "In gebruik" || obj.prop("Status") == null)) {
    let note = obj.createObject("note", 10, 60, 160, 25);
    note.fontSize = obj.fontSize - 1;
    note.text = `Status: ${obj.prop("Status")}`;
    note.fillColor = "#009900";
    console.log(`- ${obj.name}: ${note.text}`);
  }
}

function plotVerbindingsrol(obj) {
  if (!(obj.prop("Verbindingsrol") == "In gebruik" || obj.prop("Verbindingsrol") == null)) {
    let note = obj.createObject("note", 10, 60, 160, 25);
    note.fontSize = obj.fontSize - 1;
    note.text = `Verbindingsrol: ${obj.prop("Verbindingsrol")}`;
    note.fillColor = "#009900";
    console.log(`- ${obj.name}: ${note.text}`);
  }
}

// GEMMA_ELEMENTEN.forEach((value, i) => {
//   console.log(`${i}) ${value[GEMMA_TYPE]}:`);
//   gemmaColl[value] = $(value[ARCHIMATE_TYPE]).filter((e) => e.prop("GEMMA type") == value[GEMMA_TYPE]);
// .filter((e) => publicerenFilter(e) >= GEMMA_PUBLICEREN.indexOf(value));

// GEMMA_ELEMENTEN.forEach((value, i) => {
//   console.log(`${i}) ${value[GEMMA_TYPE]}:`);
//   gemmaColl[value] = $("application-component")
//     .filter((e) => e.prop("GEMMA type") == "Referentiecomponent")
//     .filter((e) => e.prop("GEMMA status") == "In gebruik")
//     .filter((e) => publicerenFilter(e) >= GEMMA_PUBLICEREN.indexOf(value));

//   console.log(`  - ${gemmaColl[value[GEMMA_TYPE]].size()} ${value[GEMMA_TYPE]}`);
//   if (i > 0) {
//     let refCompDiff = gemmaColl[GEMMA_PUBLICEREN[i - 1]].not(gemmaColl[GEMMA_PUBLICEREN[i]]);
//     if (refCompDiff.size() > 0) {
//       console.log(`  - Weggelaten uit ${GEMMA_PUBLICEREN[i - 1]}:`);
//       refCompDiff.forEach((r) => console.log(`    - ${r}`));
//     }
//   }
// });
