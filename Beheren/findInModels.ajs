/**
 * findInModels.ajs
 *
 * Loop over all opened models
 * Find the objects with given search string in name, ID or property Object ID
 * Display the objects in a table
 *
 */

load(__DIR__ + "../_lib/Common.js");

initConsoleLog(__FILE__);

promptText = `Find objects in all opened models by "name", "id" or property "Object ID"\nYou can use wildcards for finding "name"`;
var searchString = window.prompt(promptText, "Enter name or ID");

try {
  if (searchString) {
    var loadedModelsList = $.model.getLoadedModels();
    var tableWithObjects = [];

    console.log("Searching in all models for: " + searchString + "\n");

    tableWithObjects.push(["Model", "view", "Concept", "id", "Object ID"]);

    for (let i = 0; i < loadedModelsList.length; i++) {
      let addModelName = true; // flag for displaying the model name once in the table

      loadedModelsList[i].setAsCurrent();

      $("*").each(function (object) {
        let objectID = object.prop("Object ID");
        // Find the objects with given search string in name, ID or property Object ID
        if (matchRule(object.name, searchString) || object.id === searchString || objectID === searchString) {
          tableWithObjects.push([addModelName ? model.name : "", "-", object, object.id, !objectID ? "-" : objectID]);
          addModelName = false;
        }
      });

      $("view")
        .find()
        .each(function (visualObject) {
					// Find all visual objects with given search string in ID
          if (visualObject.id === searchString) {
						let objectID = visualObject.concept.prop("Object ID");
            tableWithObjects.push([
              addModelName ? model.name : "",
              visualObject.view.name,
              visualObject,
              visualObject.id,
              !objectID ? "-" : objectID,
            ]);
            addModelName = false;
          }
        });
      if (addModelName) {
        tableWithObjects.push([model.name, "-", "-", "", ""]);
      }
    }
    console.log(table(tableWithObjects, { markdown: true }));
  } else {
    console.log("Cancelled");
  }
} catch (error) {
  console.log("> Error: " + error);
  console.log("> Stack: " + error.stack);
}

finishConsoleLog();

//Short code
function matchRule(str, rule) {
  // var escapeRegex = (str) => str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
  var escapeRegex = (str) => str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
  return new RegExp("^" + rule.split("*").map(escapeRegex).join(".*") + "$", "i").test(str);
}

//Explanation code
function matchRuleExpl(str, rule) {
  // for this solution to work on any string, no matter what characters it has
  var escapeRegex = (str) => str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");

  // "."  => Find a single character, except newline or line terminator
  // ".*" => Matches any string that contains zero or more characters
  rule = rule.split("*").map(escapeRegex).join(".*");

  // "^"  => Matches any string with the following at the beginning of it
  // "$"  => Matches any string with that in front at the end of it
  rule = "^" + rule + "$";

  //Create a regular expression object for matching string
  //flag "i" is for case insensitive
  var regex = new RegExp(rule, "i");

  //Returns true if it finds a match, otherwise it returns false
  return regex.test(str);
}
