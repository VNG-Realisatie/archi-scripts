/*
 * Export To CSV
 * 
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 * Requires PapaParse - https://www.papaparse.com/
 * Works with Import from CSV script - https://gist.github.com/smileham/1e57a5946235e780dee5a824f664aa3d
 * 
 * Version 1: Export to CSV
 * Version 1.1: Avoid duplicate concepts exported from diagram
 * Version 1.2: Fix missing properties
 * Version 2: Updated to export Relationships to additional CSV
 * Version 2.1: Added error check for View.
 * Version 3: Mark added relationship properties and restructure
 *
 * (c) 2018 Steven Mileham
 *
 */

load(__DIR__ + "lib/papaparse.min.js");

var objectIndexMap = [];

// Set up some elementHeaders
var elementHeaders = [
    "Element label",
    "Element documentation",
    "Element ID",
    "Element type"
];

var relationshipHeaders = [
	"Relationship ID",
	"Relationship label",
	"Relationship documentation",
	"Source element",
	"Source type",
	"Source ID",
	"Relationship type",
	"Target ID",
	"Target element",
	"Target type"
];

var elementData = [];
var relationshipData = [];
var selectedView = $(selection).filter("archimate-diagram-model").first();

var debug = false;

// Show output in the console
console.show();
console.clear();
console.log("> Starting CSV Export for selected view : " + selectedView);

if (selectedView) {

	// Loop through all element occurrences
	// element is the occurrence of the element on the diagram. element.concept is the actual element
    $(selectedView).find().not("relationship").each(function(element) { 

		debug? console.log("Element : " + element.concept.name):true;

		try {
            if (!objectIndexMap[element.concept.id]) {
                var elementRow = new Object;

				objectIndexMap[element.concept.id]=true;

				elementRow[elementHeaders[0]]=element.concept.name;
                elementRow[elementHeaders[1]]=element.concept.documentation;
                elementRow[elementHeaders[2]]=element.concept.id;
                elementRow[elementHeaders[3]]=element.concept.type;

                debug? console.log("> Number of properties : " + element.concept.prop().length):true;

                // retrieve all properties of the element
                for (var i=0; i<element.concept.prop().length; i++){
                    var PropertyLabel = element.concept.prop()[i];

                    if (element.concept.prop(PropertyLabel)) {
                        var found = false;

						for (var j=0; j<elementHeaders.length; j++) {
                            if (elementHeaders[j]==PropertyLabel) {found=true;}            
                        }
                        if (!found) { // only add new property label to the header
                            elementHeaders.push(PropertyLabel);
                            debug? console.log("> New property label : " + PropertyLabel):true;
                        }

						elementRow[PropertyLabel] = element.concept.prop(PropertyLabel);
						debug? console.log("> Add property " + PropertyLabel + ": " + element.concept.prop(PropertyLabel)):true;
                    }
                }

                elementData.push(elementRow);

                // Get Relationships
                $(element.concept).outRels().each(function (relationship) { 
                    if (!objectIndexMap[relationship.id]) {
                        var relationshipRow = new Object;

						objectIndexMap[relationship.id]=true;
        
						debug? console.log(">> Relationship : " + relationship.source.name + " <-> " + relationship.target.name):true;

						relationshipRow[relationshipHeaders[0]]=relationship.id;
                        relationshipRow[relationshipHeaders[1]]=relationship.name;
                        relationshipRow[relationshipHeaders[2]]=relationship.documentation;
                        relationshipRow[relationshipHeaders[3]]=relationship.source.name;
                        relationshipRow[relationshipHeaders[4]]=relationship.source.type;
                        relationshipRow[relationshipHeaders[5]]=relationship.source.id;
                        relationshipRow[relationshipHeaders[6]]=relationship.type;
                        relationshipRow[relationshipHeaders[7]]=relationship.target.id;
                        relationshipRow[relationshipHeaders[8]]=relationship.target.name;
                        relationshipRow[relationshipHeaders[9]]=relationship.target.type;

                        // Retrieve all properties of the relation
                        for (var i=0; i<relationship.prop().length; i++){
							var PropertyLabel = relationship.prop()[i];
							
                            if (relationship.prop(PropertyLabel)) {
                                var found = false;
                                for (var j=0; j<relationshipHeaders.length; j++) {
                                    if (relationshipHeaders[j]==PropertyLabel) {found=true;}            
                                }
                                if (!found) { // only add new property label to the header
                                    relationshipHeaders.push(PropertyLabel);
									debug? console.log(">>> New property label : " + PropertyLabel):true;
                                }
                                relationshipRow[PropertyLabel] = relationship.prop(PropertyLabel);
								debug? console.log(">>> Add property " + PropertyLabel + ": " + relationship.prop(PropertyLabel)):true;
                            }
                        }
						
                        relationshipData.push(relationshipRow);
                    }
                    else {
                        console.log("Duplicate relationship: ", relationship.name);
                    }
                }); // each relation
            }
            else {
                console.log("Duplicate Concept: ", element.concept.name);
            }
        }
        catch (error) {
            console.log("> Error, ignoring: " + element);
        }
    }); // each element

    // Open a dialog to let the user choose where to save the generated file
    var defaultFileName = model.name ? model.name + "-" + selectedView.name + ".csv" : "Exported Model.csv"; // Default file name
	var ExportFile = window.promptSaveFile({ title: "Export to CSV", filterExtensions: [ "*.csv" ], fileName: defaultFileName } );

	var elementExportFile = 		ExportFile.substring(0,ExportFile.length-4) +"-element.csv";
	var relationshipExportFile = 	ExportFile.substring(0,ExportFile.length-4) +"-relationship.csv";

    console.log("==============");
    console.log("Elements in ExportFile: " 		+ elementExportFile);
    console.log("> Header : " 	+ elementHeaders);
    console.log("> Nr columns : " + elementHeaders.length);
    console.log("> Nr rows : " 	+ elementData.length);
    console.log("==============");
    console.log("Relationships in ExportFile: " 		+ relationshipExportFile);
    console.log("> Header : " 	+ relationshipHeaders);
    console.log("> Nr columns : " + relationshipHeaders.length);
    console.log("> Nr rows : " 	+ relationshipData.length);

	console.log("==============");
    if(elementExportFile != null) {
        $.fs.writeFile(elementExportFile, 		Papa.unparse({fields:elementHeaders, data:elementData}));
        $.fs.writeFile(relationshipExportFile, 	Papa.unparse({fields:relationshipHeaders, data:relationshipData}));
        console.log("> Export done");
    }
    else {
        console.log("> Export cancelled");
    }
}
else {
    console.log("> Please Select a View");
}