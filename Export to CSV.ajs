/*
 * Export To CSV
 * 
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 * Requires PapaParse - https://www.papaparse.com/
 * Works with Import from CSV script - https://gist.github.com/smileham/1e57a5946235e780dee5a824f664aa3d
 * 
 * Version 1: Export to CSV
 * Version 1.1: Avoid duplicate concepts exported from diagram
 * Version 1.2: Fix missing properties
 * Version 2: Updated to export Relationships to additional CSV
 * Version 2.1: Added error check for View.
 *
 * (c) 2018 Steven Mileham
 *
 */

var debug = true;

// Show output in the console
console.show();
console.clear();
console.log("> Starting CSV Export");

load(__DIR__ + "lib/papaparse.min.js");

var ObjectHashMap = [];

// Set up some elementHeaders
var elementHeaders = [
    "Name",
    "Documentation",
    "ID",
    "Type"
];

var relationshipHeaders = [
    "Relationship ID",
    "Source ID",
    "Source Name",
    "Source Type",
    "Relationship Type",
    "Target ID",
    "Target Name",
    "Target Type",
    "Relationship Name",
    "Relationship Documentation"
];

/* 
var typeMappings = {
    "access-relationship":"Accesses",
    "composition-relationship":"Comprises",
    "flow-relationship":"Flows to",
    "realization-relationship":"Realises",
    "assignment-relationship":"Assigned to",
    "serving-relationship":"Serves/Used By",
    "association-relationship":"Associated to",
    "aggregation-relationship":"Aggregates"
}
*/

var theData = new Array();
var theRelationshipData = new Array();

var theView = $(selection).filter("archimate-diagram-model").first();
debug? console.log(theView):true;

if (theView) {

    // Loop through all elements and set cells to elememt info
    $(theView).find().not("relationship").each(function(element) {
		
        var theElement = element.concept; // element is the occurrence of the element on the diagram. theElement is the actual element

        try {
            if (!ObjectHashMap[theElement.id]) {
                ObjectHashMap[theElement.id]=true;

                //var theElement.prop() = theElement.prop(); //=> properties' key for the first object
                var ElementProperties2 = [];

                for (var i=0; i<theElement.prop().length; i++){
                    var found = false;
                    for (var j=0; j<ElementProperties2.length; j++) {
                        if (ElementProperties2[j]==theElement.prop()[i]) {
                            found=true;
                        }
                    }
                    if (!found) {
                        ElementProperties2.push(theElement.prop()[i]);
                        elementHeaders.push(theElement.prop()[i]);
                    }
                }

                var theElementRow = new Object;
                theElementRow["Name"]=theElement.name;
                theElementRow["Documentation"]=theElement.documentation;
                theElementRow["ID"]=theElement.id;
                theElementRow["Type"]=theElement.type;

                for (var i=0; i<ElementProperties2.length; i++){
                    if (theElement.prop(ElementProperties2[i])) {
                        theElementRow[ElementProperties2[i]]="" + theElement.prop(ElementProperties2[i]);
                    }
                }
                debug? console.log("> theElementRow"):true;
                debug? console.log(theElementRow["Name"]):true;

                theData.push(theElementRow);

                // Get Relationships

                $(theElement).outRels().each(function (relationship) { // ## waarom niet vanuit theElement??? geen check op dubbeling, wel nodig voor occurrences
                    if (!ObjectHashMap[relationship.id]) {
                        ObjectHashMap[relationship.id]=true;
        
                        var theRelationshipRow = new Object;
                        theRelationshipRow["Relationship ID"]=relationship.id;
                        theRelationshipRow["Source Name"]=relationship.source.name;
                        theRelationshipRow["Source Type"]=relationship.source.type;
                        theRelationshipRow["Source ID"]=relationship.source.id;
                        // theRelationshipRow["Relationship Type"]=!typeMappings[relationship.type]?relationship.type:typeMappings[relationship.type];
                        theRelationshipRow["Relationship Type"]=relationship.type;
                        theRelationshipRow["Target ID"]=relationship.target.id;
                        theRelationshipRow["Target Name"]=relationship.target.name;
                        theRelationshipRow["Target Type"]=relationship.target.type;
                        theRelationshipRow["Relationship Name"]=relationship.name;
                        theRelationshipRow["Relationship Documentation"]=relationship.documentation;
                        theRelationshipRow["Object ID hard"]=relationship.prop("Object ID");

                        //var relationship.prop() = relationship.prop();  
                        var RelationshipProperties2 = [];
                        debug? console.log("relationship.prop : " + relationship.prop()):true;


                        for (var i=0; i<relationship.prop().length; i++){
                            var found = false;
                            for (var j=0; j<RelationshipProperties2.length; j++) {
                                if (RelationshipProperties2[j]==relationship.prop()[i]) {
                                    found=true;
                                }
                            }
                            if (!found) {
                                RelationshipProperties2.push(relationship.prop()[i]);
                                relationshipHeaders.push(relationship.prop()[i]);
                            }
                        }
                        for (var i=0; i<RelationshipProperties2.length; i++){
                            if (relationship.prop(RelationshipProperties2[i])) {
                                theRelationshipRow[RelationshipProperties2[i]]="" + relationship.prop(RelationshipProperties2[i]);
                            }
                        }
                        debug? console.log("> theRelationshipRow"):true;
                        debug? console.log(theRelationshipRow["Source Name"] + " <-> " + theRelationshipRow["Target Name"] ):true;
    
                        theRelationshipData.push(theRelationshipRow);
                    }
                    else {
                        console.log("Duplicate relationship: ",relationship.name);
                    }
                }); // each relation
            }
            else {
                console.log("Duplicate Concept: ",theElement.name);
            }
        }
        catch (error) {
            console.log("> Ignoring: "+element);
        }
    }); // each element

    // Open a dialog to let the user choose where to save the generated file
    var defaultFileName = model.name ? model.name + "-" + theView.name + ".csv" : "Exported Model.csv"; // Default file name
    var exportFile = window.promptSaveFile({ title: "Export to CSV", filterExtensions: [ "*.csv" ], fileName: defaultFileName } );

    debug? console.log("> elementHeaders: " + elementHeaders):true;

    debug? console.log("> Number of elements: " + theData.length):true;
//   debug? console.log(theData):true;
    debug? console.log("> Number of relations: " + theRelationshipData.length):true;

    var theCSV = Papa.unparse({fields:elementHeaders, data:theData});
    var theRelationshipsCSV = Papa.unparse({fields:relationshipHeaders, data:theRelationshipData});

    if(exportFile != null) {
        $.fs.writeFile(exportFile, theCSV);
        $.fs.writeFile(exportFile.substring(0,exportFile.length-4) +"-relationship.csv", theRelationshipsCSV);
        console.log("> Export done");
    }
    else {
        console.log("> Export cancelled");
    }
}
else {
    console.log("> Please Select a View");
}