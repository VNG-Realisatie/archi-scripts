/**
 * findDuplicateRelations
 *  - Find all duplicate relations
 *  - duplicate relation can have different names!
 *
 *  Definition of duplicate relation
 *  - same type
 *  - source and target element are equal
 */

console.clear();
console.log("Starting findDuplicateRelations\n");

// add all relations of the model to an array.
let relations = [];
$("relation").each((relation) => relations.push(relation));

const relationArray = relations.map((relation) => getRelationStrings(relation));

// create list of duplicate relations.
const lookup = relationArray.reduce((accumulator, entry) => {
  // reduce relations to lookup table with count of occurrences - 1
  accumulator[entry.relKey] = accumulator[entry.relKey] + 1 || 0;
  return accumulator;
}, {});
// If the lookup entry is 0 (false), it was only seen once and filter omits it from the result set, else it's kept
const duplicate_Array = relationArray.filter((entry) => lookup[entry.relKey]).sort(sortRelName);

if (duplicate_Array.length > 0) {
  console.log(`Duplicate relations with the same type, source and target`);
  printDuplicates(duplicate_Array);
}
console.log(`\nFound ${duplicate_Array.length} duplicate relations (source -> target)`);
console.log("\nEnding findDuplicateRelations");

function getRelationStrings(r) {
  let relKey = `${r.type}:`;
  if (r.type == "access-relationship") relKey += ` (${r.accessType})`;
  if (r.type == "influence-relationship") relKey += ` (${r.influenceStrength})`;
  if (r.type == "association-relationship") relKey += ` (${r.associationDirected})`;

  //  let relName = `${relKey} ${r.source.name} -[${r.name}]-> ${r.target.name}`;
  let relName = `${relKey} ${r.source.name} --> ${r.target.name}`;
  //  relKey += `${r.source.id} -[${r.name}]-> ${r.target.id}`;
  relKey += `${r.source.id} ${r.target.id}`;

  return { relKey: relKey, relName: relName, relation: r };
}

/**
 * sortRelName()
 * 	sort all entries on property key
 */
function sortRelName(a, b) {
  if (a.relKey + a.relation.name < b.relKey + b.relation.name) return -1;
  if (a.relKey + a.relation.name > b.relKey + b.relation.name) return 1;
  return 0;
  //	return a.key + a.relation.name.localeCompare(b.key + a.relation.name)
}

function printDuplicates(duprels) {
  for (let i = 0; i < duprels.length; i++) {
    if (i == 0) {
      console.log(`- ${duprels[i].relName}`);
    } else {
      if (duprels[i].relKey !== duprels[i - 1].relKey) {
        console.log();
        console.log(`- ${duprels[i].relName}`);
      }
    }
    console.log(
      `   ${i}) --${duprels[i].relation.name}->\t id=${
        duprels[i].relation.id
      }     "Object id"=${duprels[i].relation.prop("Object ID")}`
    );
  }
}
