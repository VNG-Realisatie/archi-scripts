/*
 * Export-import To CSV
 * 
 * Version 1: Common functions and headers voor Export and Import to CSV
 * 
 * (c) 2019 Mark Backer
 *
 */ 
// PropertyWithCustomID for finding existing elements
var PropertyWithCustomID = "Object ID";
// Custom property for logging import action with element or relation
var customImportLog = "ImportLog";

var E_I_Debug = false;
var E_I_Info = true;

load(__DIR__ + "../lib/papaparse.min.js");

// Set up some elementHeaders
var elementHeaderDef = {
	// display: function display() {
	// 	for (var i in this) {
	// 		return "Header label for " + i + " = " + this[i];
	// 	}
	// },
	//	jArchi property: 	"Header",
	id: 				"Element ID",
	name: 				"Element label",
	type: 				"Element type",
	documentation: 		"Element documentation"
};
  
var relationHeaderDef = {
//	"jArchi property" 	"Header",
	id:					"Relationship ID",
	name:				"Relationship label",
	type:				"Relationship type",
	documentation:		"Relationship documentation",
	"source.id":		"Source ID",
	"source.name":		"Source label",
	"source.type":		"Source type",
	"source CustomID":	"Source " + PropertyWithCustomID, // custom ID for finding the source element
	"target.id":		"Target ID",
	"target.name":		"Target label",
	"target.type":		"Target type",
	"target CustomID":	"Target " + PropertyWithCustomID // custom ID for finding the target element
};

/*
 *	Read CSV file in UTF-8 encoding and return file parsed into an array
 */  
function read_CSVdata(CSVfilename_postfix) {

	var filePath = window.promptOpenFile({ title: "Open CSV with " + CSVfilename_postfix , filterExtensions: ["*.CSV"], fileName: "*.csv" });
	var theCSV ="";
	if (filePath) {
		var FileReader = Java.type("java.io.FileReader");
		var InputStreamReader = Java.type("java.io.InputStreamReader");
		var FileInputStream = Java.type("java.io.FileInputStream");
		var theCSVFile = new InputStreamReader(new FileInputStream(filePath), "UTF-8");

		var data = theCSVFile.read();
		console.log("> Please Wait...");
	
		while(data != -1) {
			var theCharacter = String.fromCharCode(data);
			theCSV+=theCharacter;
			data = theCSVFile.read(); 
		}
		theCSVFile.close();

		console.log("> File Loaded");

		return Papa.parse(theCSV);
	} else {
		console.log("> Cancelled");
	}
}

/*
 *	show some statistics 
 */  
function stats_CSVdata(pType, pDuplicate, pHeader, pData) {
	var i=0;
	console.log("==============");
	console.log("> Columns for " + pType );
	for (var label in pHeader) {
		i++;
		console.log(">> " + i + " : " + pHeader[label]);
	}
  
	if (pDuplicate.length > 0) {
		console.log("> Info: " + pType + " with multiple occurrences on view: ");
		for (var i = 0; i < pDuplicate.length; i++) {
			console.log(">> ", pDuplicate[i]);
		}
	}
	console.log("> Number of " + pType + " : " + pData.length );
}

/*
 *	Save all object to CSV 
 */  
function write_CSVdata(pType, pHeader, pData, pExportFile) {
	var i=0;
	var headerArray = [];
	if (pExportFile != null) {
		var ExportFile = pExportFile.substring(0, pExportFile.length - 4) + ("-" + pType + ".csv");
	  	for (var label in pHeader) {
			headerArray[i]=pHeader[label];
			i++;
		}
		$.fs.writeFile( ExportFile, Papa.unparse({ fields: headerArray,  data: pData }) );
		console.log(">>> " + pType + " saved in : " + ExportFile);
	} else {
		console.log("> Save CSV cancelled");
	}
}

/*
 *	Find Object with property en propertyvalue
 */  
function FindObjectWithProperty(pConcept, pProperty, pValue) {
	var vSelectedObject = null;
	E_I_Debug?console.log(">>> FindObjectWithProperty() > (pConcept=" + pConcept + ", pProperty=" + pProperty + ", pValue=" + pValue + ")"):true;
	if (typeof pValue !== "undefined"){ // property must exist
		// console.log(">>> FindObjectWithProperty() > pValue = " + typeof(pValue));
		if (pValue) { // don't search with empty value
			$(pConcept).each(function(vObject) {
				// console.log(">>> FindObjectWithProperty() > vObject : " + vObject);
				if (vObject.prop(pProperty) == pValue) {
					E_I_Debug?console.log(">>> FindObjectWithProperty() > " + pConcept + " found : " + vObject + " with " + pProperty + " = " + pValue):true;
					vSelectedObject = vObject;
				}
			}); // each vObject
		}
	} else {
		E_I_Debug?console.log(">>> FindObjectWithProperty() > no custom property value "):true;
	}
	return vSelectedObject;
} 

/*
 *	Try to find an existing element.
 *	Priority for finding an element
 *	- return element found with a given property value
 * 	- else return element found with Archi id
 * 	- else return element found by name.
 *  	- return the first if there are multiple elements with the same name
 */  
function FindElement(pProperty, pPropertyValue, pSelectID, pSelectName, pType) {
	var vElement = null;
	var vElementFound = false;
	var vFindImportText = "";

	// Find the element with custom property
	E_I_Debug? console.log(">> FindElement() > " + pProperty + " = " + pPropertyValue ) : true;
	vElement = FindObjectWithProperty("element", pProperty, pPropertyValue);
	if (vElement) {	
		vElementFound = true;
		vFindImportText = pProperty;
	} 
	
	// Find element with the id.
	if (!vElementFound) { // if there is no vElement with the pProperty
		if (pSelectID) {
			E_I_Debug? console.log(">> FindElement() > " + pSelectID + " = " + vSelectID): true;

			vSelectID ="#" + pSelectID;
			vElementCollection = $(vSelectID); // Result is collection of elements with #id

			if (vElementCollection.is('element')) {
				vElementFound = true;
				vFindImportText = pSelectID;
			}
		}
	}

	// Find element by name.
	if (!vElementFound) { // if there is no vElement with the pProperty of the id
		if (pSelectName) {

			vSelectName = "." + pSelectName;
			E_I_Debug? console.log(">> FindElement() > " + pSelectName + " = " + vSelectName ):true;
			if (!pType) { // elementtype is known
				throw "Element without type "  + pSelectName + " = " + vSelectName;
			}

			vElementCollection = $(vSelectName).filter(pType);
			if (vElementCollection.is('element')) { // if element found 

				if (vElementCollection.size() == 1) {
					vFindImportText = pSelectName;
					vElement = vElementCollection.first();
					vElementFound = true;
				} else {
					vFindImportText = pSelectName + " (" + pType +  ") : Multiple elements found, number = " + vElementCollection.size();
				}
			} else {
				vFindImportText = pSelectName + " (" + pType +  ") : Not found";
			}
		} else {
			vFindImportText = "Empty name, not found";
		}
	}

	E_I_Info? console.log(">> FindElement() : " + vFindImportText + " > " + vElement):true;
	return {vElement:vElement, vFindImportText:vFindImportText}
}


