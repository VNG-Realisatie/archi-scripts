/*
 * Export-import To CSV
 * 
 * Version 1: Common header mappings voor Export and Import to CSV
 * 
 * (c) 2019 Mark Backer
 *
 *         theRelationshipRow["Relationship Type"]=!headerMappings[r.type]?r.type:headerMappings[r.type];
 */

// Set up some elementHeaders
var elementHeaders = [
    "vElement ID",
    "vElement label",
    "vElement type",
    "vElement documentation"
];

var elementMappings = {
	"id":			elementHeaders[0],
	"name":			elementHeaders[1],
	"type":			elementHeaders[2],
	"documentation":elementHeaders[3]
}

var relationshipHeaders = [
	"Relationship ID",
	"Relationship label",
	"Relationship documentation",
	"Relationship type",
	"Source ID",
	"Source label",
	"Source type",
	"Source vObject ID",
	"Target ID",
	"Target label",
	"Target type",
	"Target vObject ID"
];

var relationshipMappings = {
	"id":				relationshipHeaders[0],
	"name":				relationshipHeaders[1],
	"documentation":	relationshipHeaders[2],
	"type":				relationshipHeaders[3],
	"source.id":		relationshipHeaders[4],
	"source.name":		relationshipHeaders[5],
	"source.type":		relationshipHeaders[6],
	"source ObjID":		relationshipHeaders[7],
	"target.id":		relationshipHeaders[8],
	"target.name":		relationshipHeaders[9],
	"target.type":		relationshipHeaders[10],
	"target ObjID":		relationshipHeaders[11]
}

function read_CSVdata(CSVfilename_postfix){
	
	var filePath = window.promptOpenFile({ title: "Open CSV with " + CSVfilename_postfix , filterExtensions: ["*.CSV"], fileName: "default.archimate" });
	
	var theCSV ="";
	if (filePath) {
		var FileReader = Java.type("java.io.FileReader");
		var theCSVFile = new FileReader(filePath);
	
	
		var data = theCSVFile.read();
		console.log("> Please Wait...");
	
		while(data != -1) {
			var theCharacter = String.fromCharCode(data);
			theCSV+=theCharacter;
			data = theCSVFile.read(); 
		}
		theCSVFile.close();
		console.log("> File Loaded");
		return theCSV;
	}
	else {
		console.log("> Cancelled");
	}
}

function ObjectPropertyFind(pConcept, pProperty, pValue) {
	var vSelectedObject = null;
	if (pValue) { // alleen zoeken met geldige waarde
		$(pConcept).each(function(vObject) {
		//	console.log("> vObject : " + vObject);
			if (vObject.prop(pProperty) == pValue) {
				debug?console.log("> Function ObjectPropertyFind > " + pConcept + " found : " + vObject + " with " + pProperty + " = " + pValue):true;
				vSelectedObject = vObject;
			}
		}); // each vObject
	}
	return vSelectedObject;
} 

function findCSVelement(pLabeledCell, pProperty, pSelectID, pSelectName) {
	var vElement = null;

	// Select the vElement with property
	debug? console.log(">> Find element with property " + pProperty + " = " + pLabeledCell[pProperty] ) : true;
	vElement = ObjectPropertyFind("element",  pProperty, pLabeledCell[pProperty]);

//	if (!vElement || vElement.length<1) { // if there is no vElement with the GEMMA Object ID
	if (!vElement) { // if there is no vElement with the GEMMA Object ID
			// Select the vElement with the id.
		selectID ="#" + pLabeledCell[pSelectID];
		debug? console.log(">> No element with " + pProperty + ", select element with " + pSelectID + " == " + selectID): true;
		vElement = $(selectID);

		if (!vElement || vElement.length < 1) { // if there is no vElement with the id
			selectName = "." + pLabeledCell[pSelectName];
			debug? console.log(">> No element with " + pSelectID + ", select element with " + pSelectName + " == " + selectName ):true;
			vElement = $(selectName);

			if (!vElement) { // if there is no vElement with the id
				debug? console.log(">> No elements found "):true;
				var vImportKey = "Not found";
			} else {
				var vImportKey = "Found with " + pSelectName;
			}
		} else {
			var vImportKey = "Found with " + pSelectID;
		}
	} else {
		var vImportKey = "Found with " + pProperty;
	}
	debug? console.log(">> function findCSVelement: vElement :" + vElement):true;
	//var vImportKey = "Multiple elements found, number = " + vElement.length;
	return {vElement:vElement, vImportKey:vImportKey}
}


