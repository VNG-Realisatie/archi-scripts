var _includeCommon_ScriptName;
var _includeCommon_Counter;

/**
 * initConsoleLog and finishconsole
 * 	first and last call in an Archi script
 * 
 * @param pFile : string __FILE__ as current script
 * @param pClear : boolean for clear console
 */
function initConsoleLog(pFile, pClear) {
	_includeCommon_Counter = startCounter();
	// Show output in the console
	filepath = pFile.split("/");
	_includeCommon_ScriptName = filepath[filepath.length - 1];

	console.show();
	if (pClear) { console.clear() };
	console.log(`Executing script "${_includeCommon_ScriptName}"...\n`);
}

function finishConsoleLog() {
	_includeCommon_Counter = endCounter(_includeCommon_Counter);
	duration = `${_includeCommon_Counter.minutes}m${_includeCommon_Counter.seconds}s`
	console.log(`\nScript "${_includeCommon_ScriptName}" finished in ${duration}\n`);
}

/**
 * startCounter and endCounter
 * 	measure runtime for a block of code
 */
function startCounter() {
	return new Date();
}

function endCounter(startCounter) {
	_endCounter = new Date();
	_durationInSeconds = parseInt((_endCounter - startCounter) / 1000);
	_minutes = parseInt(_durationInSeconds / 60);
	_seconds = parseInt(_durationInSeconds % 60);
	return { minutes: _minutes, seconds: _seconds };
}

/**
 * info()
 * 	show informational message if global _console_info is set
 * @param msg string information message
 */
function info(msg) {
	if (_console_info) console.log(`Info : ${msg}`);
}

/**
 * debug()
 * 	show debug message if global _console_debug is set
 * @param msg string information message
 */
function debug(msg) {
	if (_console_debug) {
		console.log("Debug: " + msg)
	};
}

/**
 * stack()
 * 	show stack message and error stack trace if global _console_stack is set
 * @param msg string information message
 */
function stack(msg) {
	if (_console_stack) {
		console.log("Stack: " + msg)
		console.log("Stack: " + (new Error()).stack)
	};
}
