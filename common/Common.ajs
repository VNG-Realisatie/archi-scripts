var _commonScriptName;
var _commonCounter;

// default console logging is off. Override in calling function with push() and pop()
let _commonShowInfoMessage = [false];
let _commonShowDebugMessage = [false];


/**
 * initConsoleLog and finishconsole
 * 	first and last call in an Archi script
 * 
 * @param pFile : string __FILE__ as current script
 * @param pClear : boolean for clear console
 */
function initConsoleLog(pFile, pClear) {
	_commonCounter = startCounter();
	// Show output in the console
	filePath = pFile.split("/");
	_commonScriptName = filePath[filePath.length - 1];

	console.show();
	if (pClear) { console.clear() };
	console.log("============================================");
	console.log(`Executing script "${_commonScriptName}"...\n`);
}

function finishConsoleLog() {
	_commonCounter = endCounter(_commonCounter);
	duration = `${_commonCounter.minutes}m${_commonCounter.seconds}s`
	console.log(`\nScript "${_commonScriptName}" finished in ${duration}\n`);
}

/**
 * startCounter and endCounter
 * 	measure runtime for a block of code
 */
function startCounter() {
	return new Date();
}

function endCounter(startCounter) {
	_endCounter = new Date();
	_durationInSeconds = parseInt((_endCounter - startCounter) / 1000);
	_minutes = parseInt(_durationInSeconds / 60);
	_seconds = parseInt(_durationInSeconds % 60);
	return { minutes: _minutes, seconds: _seconds };
}

/**
 * info()
 * 	show informational message if global _commonShowInfoMessage is set
 * @param msg string information message
 */
function info(msg) {
	logMessage(_commonShowInfoMessage, "Info", msg)
}

/**
 * debug()
 * 	show debug message if global _commonShowDebugMessage is set
 * @param msg string information message
 */
function debug(msg) {
	logMessage(_commonShowDebugMessage, "Debug", msg)
}

/**
 * logMessage()
 * 	show message with prefix
 * @param msg string information message
 */
function logMessage(logSwitch, logType, pMsg) {
	if (logSwitch[logSwitch.length - 1]) {
		let preFix = '>';
		console.log(`${preFix.repeat(logSwitch.length)} ${logType}: ${pMsg}`)
	};
}

/**
 * stack()
 * 	show stack message and error stack trace
 * @param msg string information message
 */
function stack(msg) {
		console.log("Error: " + msg)
		console.log("Stack: " + (new Error()).stack)
}
