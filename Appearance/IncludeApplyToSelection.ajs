/*
 * IncludeApplyToSelection
 * 
 * (c) 2019 Mark Backer
 *
 */

/**
 * applyToSelection
 * 
 * Apply a formatting function to the selection. 
 * Depending on the selection, the given function is applied to a selection off visual concepts on one or multiple views
 * 
 * Behavior
 * 		select model, apply function to objects on all views
 * 		select folder(s), apply function to objects on views in selected (sub)folders
 * 		select view(s), apply function to objects on selected view(s)
 *   	select object(s) in model tree, apply function to all references on all views
 * 
 * If you select on the view
 * 		select one object on view, apply function to selected objects
 * 			if parameter applyToType, apply function to all elements of same type; 
 * 		select multiple objects in view, apply function to selected objects
 * 			if parameter applyToType, apply function to selected elements of same type as first selected object; 
 * 
 * Parameters:
 * 	@param pSelection - the selection of objects
 *  @param pValidSelection - valid collectionType of objects to apply the function to
 * 		- tree
 * 		- view
 * 		- concept
 * 		- diagram-object
 * 	@param pFunc - function with formatting for selected objects (function must have a parameter object)
 *  @param pFuncParam - optional parameters for function
 * 		
 */
function applyToSelection(pSelection, pFunc, pFuncParam) {
	var SelectionType;
	var archiCollectionType = [
		'archimate-model',
		'folder',
		'archimate-diagram-model', //  'view' also selects sketch and canvas
		'concept',
		'diagram-model-note',
		'diagram-model-group',
		'diagram-model-connection',
		'diagram-model-image',
		'diagram-model-reference'
	];

	try {
		for (var j=0; j<archiCollectionType.length; j++) {
			if (pSelection.is(archiCollectionType[j])) {
				SelectionType = archiCollectionType[j]
			}
		}
		console.log(`> You've selected a ${SelectionType}`)

		switch (SelectionType) {
			case 'archimate-model': {
				console.log(`>> ${pFunc.name}() will be applied to objects on all views in [${model}]\n`);
				applyToAllViews(pSelection, pFunc, pFuncParam)
				break;
			}
			case 'folder': {
				console.log(`>> ${pFunc.name}() will be applied to objects on all views in selected folders\n`);
				applyToViewsInFolder(pSelection, pFunc, pFuncParam)
				break;
			}
			case 'archimate-diagram-model': {
				console.log(`>> ${pFunc.name}() will be applied to objects on selected views\n`);
				applyToViews(pSelection, pFunc, pFuncParam)
				break;
			}
			case 'concept': {
				var NumberSelected;
				var SelectedIn;
				var	selectedElement = pSelection.filter("concept").first();
				if (selectedElement.id == selectedElement.concept.id){
					SelectedIn = "model tree"
				} else {
					SelectedIn = "view"
				}

				if (pSelection.filter("concept").size() == 1){
					NumberSelected = "One concept is"
				} else {
					NumberSelected = "Multiple concepts are"
				}

				ConceptSelectionType = `${NumberSelected} selected in ${SelectedIn}`
				console.log(`>> ${ConceptSelectionType}`)
				switch (ConceptSelectionType) {
					case "One concept is selected in model tree": {
						console.log(`>> ${pFunc.name} will be applied to objects of ${selectedElement.type} on all views in [${model}]\n`);

						applyToElementTypeAllView(pSelection, pFunc, pFuncParam)
						break
					}
					case "One concept is selected in view": {
						console.log(`>> ${pFunc.name} will be applied to all ${selectedElement.type} in view "${selectedElement.view.name}"\n`);
						
						applyToElementTypeOnView(pSelection, pFunc, pFuncParam)
						break
					}
					case "Multiple concepts are selected in view": {
						console.log(`>> ${pFunc.name} will be applied to selected objects in view "${selectedElement.view.name}"\n`);
							
						applyToSelectionOnView(pSelection, pFunc, pFuncParam)
						break
					}
					case "Multiple concepts are selected in model tree": {
						console.log(`>> Not possible, select one object in the tree or make selection in a view\n`);
						break
					}
					default:
				}
				break;
			}
			case 'diagram-model-note':
			case 'diagram-model-group':
			case 'diagram-model-connection':
			case 'diagram-model-image':
			case 'diagram-model-reference': {
				console.log(`> Select the model, a folder or a concept. Visual element not supported`)
				break;
			}
			default:
		}
	}
	catch (error) {
		console.log(`>> ${arguments.callee.name}(): ${typeof error.stack == 'undefined' ? error : error.stack}`);
	}
}

function applyToAllViews(pSelection, pFunc, pFuncParam) {
	var i=0;
	var v=0;
	$('view').each(function(view) {
		console.log(`>> View: "${view.name}"`);
		$(view).find('concept').each(function(occurrence){
			pFunc(occurrence, pFuncParam);
			i++;
		})
		v++;
	})
	console.log(`${pFunc.name} applied to ${i} elements in ${v} views`)
}

function applyToViewsInFolder(pSelection, pFunc, pFuncParam) {
	var i=0;
	var v=0;
	//pSelection.add(pSelection.find('folder'))
	pSelection.filter('folder').each(function(folder){
		console.log(`> Folder ${folder.name}`);
		$(folder).find('view').each(function(view){
			console.log(`>> View: "${view.name}"`);
			$(view).find('concept').each(function(occurrence){
				pFunc(occurrence, pFuncParam);
				i++;
			})
			v++;
		})
	})
	console.log(`${pFunc.name} applied to ${i} elements in ${v} views`)
}

function applyToViews(pSelection, pFunc, pFuncParam) {
	var i=0;
	var v=0;
	$(pSelection).filter('view').each(function(view){
		console.log(`>> View: "${view.name}"`);
		$(view).find('concept').each(function(occurrence){
			pFunc(occurrence, pFuncParam);
			i++;
		})
		v++;
	})	
	console.log(`${pFunc.name} applied to ${i} elements in ${v} views`)
}

function applyToElementTypeAllView(pSelection, pFunc, pFuncParam) {
	var i=0;
	var v=0;
	// Reset formatting in all referenced views
	let ViewSet = new Set()
	$(pSelection).objectRefs().each(function(occurrence){
//		pFunc(occurrence, pFuncParam);
		ViewSet.add(occurrence.view.name);
		i++;
	})
	v = ViewSet.size;
	// console.log(`>> Concepts found on ${v} views`)
	// for (let view of ViewSet) { 
	// 	console.log(`>>> ${view}`); 
	// }		
	console.log(`Function not applied to ${i} elements in ${v} views`)
	for (let entry of ViewSet) {
		console.log(`>> Skipped view: "${entry}"`);
	}
}

function applyToElementTypeOnView(pSelection, pFunc, pFuncParam) {
	var i=0;
	var v=0;
	selectedElement = pSelection.first();
	$(selectedElement.view).find(selectedElement.concept.type).forEach(function(occurrence) {
		pFunc(occurrence, pFuncParam);
		i++;
	})
	console.log(`${pFunc.name} applied to ${i} elements of type ${selectedElement.type} in view "${selectedElement.view.name}"`)
}

function applyToSelectionOnView(pSelection, pFunc, pFuncParam) {
	var i=0;
	var v=0;
	selectedElement = pSelection.first();

	$(pSelection).each(function(occurrence){
		pFunc(occurrence, pFuncParam);
		i++;
	})
	v++;
	console.log(`${pFunc.name} applied to ${i} elements of type ${selectedElement.type} in view "${selectedElement.view.name}"`)
}