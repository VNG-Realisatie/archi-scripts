/* 
 * ColorByProperty_View
 * 		Given a specific view, color elements by the value of a property
 * 		
 * 
 * 
 * 
 */

//	chroma.js for all kinds of color conversions and color scales https://gka.github.io/chroma.js/
load(__DIR__ + "../lib/chroma.min.js");

// Show output in the console
var filepath = __FILE__.split("/");
var scriptName = filepath[filepath.length-1].replace(/%20/g, " ");
// scriptName = scriptName.replace(/%20/g, " ");
console.show();
console.clear();
console.log(`Executing script "${scriptName}"...\n`);
 
var selectedView = $(selection).filter("archimate-diagram-model").first();

if (!selectedView) {
	console.log("> Please Select a View");
} else {
	switch  (selectedView.name) {
		case "API-landschap (color)": 
			colorElements(selectedView, "application-service","Type voorziening", colorByTypeVoorziening);
			break;
		case "BBN classificatie referentiecomponenten (blues)": 
			colorElements(selectedView, "application-component","Vertrouwelijkheid", colorByVertrouwelijkheid) 
			break;
		default:
			console.log(`View "${selectedView.name}" unknown. Extend script with a color function for this view`)
	}
}
console.log(`\nScript "${scriptName}" finished`);


//  in diagram pView, color elements by a property value
function colorElements(pView, elementType, propertyName, colorfunc)
{
	var i=0;
	$(pView).find(elementType).forEach(function(objectOccurrence) {
		var color = colorfunc(objectOccurrence.prop(propertyName));
		if (color) {
			objectOccurrence.fillColor=color;
			i++;
		}
	})
	console.log(`${i} elements of type ${elementType} colored by "${propertyName}" in view "${selectedView.name}"`)
}

// given a value return a color code
function colorByVertrouwelijkheid(pValue)
{
/*
	ColorBrewer colors, see http://colorbrewer2.org/#type=sequential&scheme=Greens&n=3

		colorscale = chroma.scale('Oranges');
		colorscale = chroma.scale('Blues');
		colorscale = chroma.scale('Greens');
		colorscale = chroma.scale('OrRd').classes(3);
		colorscale = chroma.scale(['yellow', '008ae5']).classes(3).padding([0.1, 0.1]);
*/
	colorscale 	= chroma.scale('Blues');

	return colorscale((pValue - 0.8)/3);
}

// given a value return a color code
function colorByTypeVoorziening(pValue)
{
	var TypeVoorziening = [
		'Referentieimplementatie',
		'Lokale voorziening',
		'Sectorale voorziening',
		'Landelijke voorziening',
		'Beheervoorziening',
		'Ontwikkelvoorziening'
	];

	colorscale = chroma.scale('Blues').padding([0, 0.3]);
	return colorscale((TypeVoorziening.indexOf(pValue))/TypeVoorziening.length);
}

