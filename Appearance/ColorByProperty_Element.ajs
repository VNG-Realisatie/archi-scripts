/*
 * 	ColorByProperty_Element
 *		Based on the view name, color elements by the value of a property
 *	
 *		chroma.js for all kinds of color conversions and color scales https://gka.github.io/chroma.js/
 *		ColorBrewer colors, see http://colorbrewer2.org/#type=sequential&scheme=Greens&n=3
 */

load(__DIR__ + "../lib/chroma.min.js");
/* 
// Show output in the console
var filepath = __FILE__.split("/");
var scriptName = filepath[filepath.length-1].replace(/%20/g, " ");
console.show();
console.clear();
console.log(`Executing script "${scriptName}"...\n`);
 */
var selectedElement = $(selection).filter("element").first();

try {
	if (selectedElement) {
		if ($(selection).filter("element").size() == 1){
			// select one element in view			-> copy formatting to all elements of same type (also figure)
			console.log(`> Color by properties of element "${selectedElement}" to all "${selectedElement.type}"`);
			console.log(`> View is ${selectedElement.view}`);

			// get list of properties
			propertiesList = selectedElement.prop();
			var property = window.prompt(`Select a property from the list\n${propertiesList}`, `${propertiesList}`)

			if (selectedElement.prop(property)){
				console.log(`> Color by property : ${property}`);
				colorByProperty(selectedElement.view, selectedElement.type, property)
			}
			else {
				console.log(`> Error : property "${property}" not valid`);
			}
		} else {
			console.log(`> Multiple elements selected, select only one element`);
		}
	} else {
		console.log(`> Select one element`);
	}
}
catch (error) {
	console.log("> Error: " + error);
	console.log("> Error: " + error.stack);
}
console.log(`\nScript "${scriptName}" finished`);


//  in diagram pView, color elements by a property value
function colorByProperty(pView, elementType, propertyName)
{
	var propertyValues = getPropertyValues(pView, elementType, propertyName);

	var i=0;
	$(pView).find(elementType).forEach(function(objectOccurrence) {
		var color = getColorForProperty(objectOccurrence.prop(propertyName), propertyValues);
		if (color) {
			objectOccurrence.fillColor=color;
			i++;
		}
	})
	console.log(`${i} elements of type ${elementType} colored by "${propertyName}" in view "${pView.name}"`)

	var group = pView.createObject("group", 0, 0, 150, 250); // Add a Note to this element
	group.name = "Legenda";
	group.figureType = 0;
	group.fillColor = "#FFFFFF"
	for (var j=0; j<propertyValues.length; j++) {
		note = group.createObject("note", 10, 10 + (j*30), 130, 25)
		note.fillColor = getColorForProperty(propertyValues[j], propertyValues)
		note.text = propertyValues[j];
	}
}

// given a value return a color code
function getColorForProperty(pValue, pValueList)
{
	// console.log(`>> pValue, list: ${pValue}, ${pValueList}`)
	colorscale = chroma.scale('RdYlBu').padding([0, 0.2]);
	// console.log(`>> pValueList.index: ${pValueList.indexOf(pValue)}`)
	// console.log(`>> pValueList.length: ${pValueList.length}`)

	return colorscale((pValueList.indexOf(pValue))/pValueList.length);
}

function getPropertyValues(pView, elementType, propertyName)
{
	let myPropertySet = new Set()
	var myList = [];

	$(pView).find(elementType).forEach(function(objectOccurrence) {
		myPropertySet.add(objectOccurrence.prop(propertyName));
	})
	console.log(`Property "${propertyName}" has ${myPropertySet.size} unique values of type ${elementType} in view "${pView.name}"`)
	for (let item of myPropertySet) {
		myList.push(item);
		console.log(`> ${item}`);
	}

	return myList;
}

// given a value return a color code
function colorByVertrouwelijkheid(pValue)
{
/*
		colorscale = chroma.scale('Oranges');
		colorscale = chroma.scale('Blues');
		colorscale = chroma.scale('Greens');
		colorscale = chroma.scale('OrRd').classes(3);
		colorscale = chroma.scale(['yellow', '008ae5']).classes(3).padding([0.1, 0.1]);
*/
	colorscale 	= chroma.scale('Blues');

	return colorscale((pValue - 0.8)/3);
}

// given a value return a color code
function colorByTypeVoorziening(pValue)
{
	var TypeVoorziening = [
		'Referentieimplementatie',
		'Lokale voorziening',
		'Sectorale voorziening',
		'Landelijke voorziening',
		'Beheervoorziening',
		'Ontwikkelvoorziening'
	];

	colorscale = chroma.scale('Blues').padding([0, 0.3]);
	return colorscale((TypeVoorziening.indexOf(pValue))/TypeVoorziening.length);
}

