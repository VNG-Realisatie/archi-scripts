// Create the input graph
// var g = new dagreD3.graphlib.Graph({compound:true})
//   .setGraph({})
//   .setDefaultEdgeLabel(function() { return {}; });

ENGINE_NASHORN = "jdk.nashorn.api.scripting.NashornScriptEngine";
ENGINE_GRAAL_VM = "com.oracle.truffle.js.scriptengine.GraalJSScriptEngine";

const NODE_WIDTH = 140;
const NODE_HEIGHT = 60;

try {
	if ($.process.engine === ENGINE_NASHORN || $.process.engine === ENGINE_GRAAL_VM) {
		if (typeof __SCRIPTS_DIR__ == "undefined") var __SCRIPTS_DIR__ = "";
		ARCHI_SCRIPT = __SCRIPTS_DIR__ + "MyScripts/";
		ARCHI_FILES = __SCRIPTS_DIR__ + "../Werkbestanden/";
		NODE_MODULES = __SCRIPTS_DIR__ + "node_modules/";

		load(ARCHI_SCRIPT + "_lib/Common.js");
		load(ARCHI_SCRIPT + "_lib/jvm-npm.js");

		initConsoleLog(__FILE__);

		// require.addPath(NODE_MODULES + "dagre/dist/");
		debug("Loading dependencies...");

		load("https://unpkg.com/cytoscape");
		load("https://unpkg.com/layout-base/layout-base.js");
		load("https://unpkg.com/avsdf-base/avsdf-base.js");
		load("https://unpkg.com/cytoscape-avsdf");
		load("https://unpkg.com/cytoscape-dagre");
		load("https://unpkg.com/cose-base/cose-base.js");
		load("https://unpkg.com/cytoscape-fcose/cytoscape-fcose.js");

		cytoscapeTest();

		finishConsoleLog();
	} else {
		console.log(`engine: ${$.process.engine}`);
		exit();
	}
} catch (error) {
	if (error.message == "$ is not defined") {
		var cytoscape = require("cytoscape");
		var fcose = require("cytoscape-fcose");
		cytoscape.use(fcose);

		cytoscapeTest();
	} else {
		console.log(`> ${typeof error.stack == "undefined" ? error : error.stack}`);
	}
}

console.log("einde cytoscapeTest");

function cytoscapeTest() {
	console.log(`Node modules used for creating graph:`);
	console.log(`- cytoscape:    ${cytoscape.version}`);

	var cy = cytoscape({
		// container: document.getElementById('cy'),
		elements: [
			{ data: { id: "a" } },
			{ data: { id: "b" } },
			{
				data: {
					id: "ab",
					source: "a",
					target: "b",
					label: "ab",
				},
			},
		],
		layout: { name: "grid" },
		style: [
			{
				selector: "node",
				style: {
					shape: "hexagon",
					"background-color": "red",
					label: "data(id)",
					width: `${NODE_WIDTH}`,
					height: `${NODE_HEIGHT}`,
				},
				selector: "edge",
				style: {
					label: "data(id)",
					color: "red",
				},
			},
		],
		styleEnabled: true,
		// headless: true
	});

	for (let i = 0; i < 10; i++) {
		cy.add({ data: { id: "node" + i } });
		var source = "node" + i;
		cy.add({
			data: {
				id: "edge" + i,
				source: source,
				target: i % 2 == 0 ? "a" : "b",
			},
		});
		for (let j = 0; j < 10; j += 2) {
			cy.add({ data: { id: `node${i}${j}` } });
			cy.add({
				data: {
					id: `edge${i}${j}`,
					source: `node${i}`,
					target: `node${i}${j}`,
					label: `label${i}${j}`,
				},
			});
		}
	}

	cy.layout({
		// name: 'circle',
		// name: 'concentric',
		// name: 'breadthfirst',
		// name: 'cose',
		// name: 'avsdf', // extension
		name: "fcose", // extension
		// name: 'random',
		// clockwise: false,
		// minNodeSpacing: 30,
		animate: false,
		// circle: true,
		grid: true,
		// radius: 200
		// name: 'grid'
	}).run();

	// print all the ids of the nodes in the graph
	cy.nodes().forEach(function (ele) {
		console.log(`ele.id(): ${ele.id()}`);
		console.log(`- pos: ${JSON.stringify(ele.position())}`);
		console.log(`- height=${ele.height()} width=${ele.width()}`);
	});

	cy.edges().forEach(function (edge) {
		console.log(`edge.id(): ${edge.id()}`);
		console.log(`edge.data(): ${JSON.stringify(edge.data())}`);
		console.log(`edge.data(label): ${edge.data("label")}`);
		// console.log(`- pos: ${JSON.stringify(edge.position())}`)
		// console.log(`- height=${edge.height()} width=${edge.width()}`);
	});

	cy.destroy();
}
