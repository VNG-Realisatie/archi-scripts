/*
 * Import from CSV
 * 
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 * Requires PapaParse - https://www.papaparse.com/
 * Works with Export to CSV Script - https://gist.github.com/smileham/15c445b17a92bd6f5dc1508e573bcd8a
 * 
 * Version 1: Import from CSV
 *
 * (c) 2018 Steven Mileham
 * 
 * Mark Backer
 * Version 2: Added import of relations and properties
 *
 */

load(__DIR__ + "lib/papaparse.min.js");
load(__DIR__ + "common/Export-import to CSV.ajs");

var debug = true;
var info = true;

var ImportDate  = new Date().toLocaleDateString();

console.show();
console.clear();
console.log("> Import CSV");

/*
 * 	Import elements
 *	
 */
if (elementCSVData = read_CSVdata("element")) {

	elementParsedData = Papa.parse(elementCSVData);

	ParsedDataHeaders = elementParsedData.data[0];
	console.log("> ParsedDataHeaders: " + ParsedDataHeaders);
	
	try {
		// skip header, read all rows
		for (var i_row=1; i_row<elementParsedData.data.length; i_row++) {
			var labeledCell = [];

			debug?console.log("> elementParsedData.data[i_row]: " + elementParsedData.data[i_row]):true;

			// label cell of i_row with headerlabel
			for (var j_col=0; j_col<ParsedDataHeaders.length; j_col++) {
				labeledCell[ParsedDataHeaders[j_col]]=elementParsedData.data[i_row][j_col];
				debug? console.log(">> elementParsedData row " + i_row + " > " + ParsedDataHeaders[j_col] + " = " + labeledCell[ParsedDataHeaders[j_col]]) : true;
			}

			result = findImportElement(labeledCell, "Object ID", elementMappings["id"], elementMappings["name"]);
			// debug?console.log(">> result from findImportElement : " + result.vFindImportText + " : " + result.vElement):true;

			if (result.vFindImportText == "Not found") {
				element = model.createElement(labeledCell[elementMappings["type"]], labeledCell[elementMappings["name"]]);
				element.prop("Import", "Created at " + ImportDate);
			} else {
				element = result.vElement;
				element.prop("Import", "Updated at " + ImportDate + ": Found with (" + result.vFindImportText + ")");
			}
			console.log(">> Import element " + element.prop("Import") + " : " + element);
			debug?console.log(">> ======== " ):true;

			element.name			=labeledCell[elementMappings["name"]];
			element.documentation	=labeledCell[elementMappings["documentation"]];
			element.type			=labeledCell[elementMappings["type"]];
			// import all properties	
			for (var j_col=elementHeaders.length; j_col<ParsedDataHeaders.length; j_col++) {
				if (labeledCell[ParsedDataHeaders[j_col]]) {
					element.prop(ParsedDataHeaders[j_col],labeledCell[ParsedDataHeaders[j_col]]);
				}
			}
		}
		console.log("> Parsing Complete")
	}
	catch (error) {
		console.log("> Error: " + error);
	}
} else {
	console.log("> No CSV with elements");
}

/*
 * Import relations
 */
 if (relationCSVData = read_CSVdata("releationship")) {

	relationParsedData = Papa.parse(relationCSVData);

	ParsedDataHeaders = relationParsedData.data[0];
	console.log("> ParsedDataHeaders: " + ParsedDataHeaders);
	
	debug=true;

	try {
		// all rows, but skip header
		for (var i_row=1; i_row<relationParsedData.data.length; i_row++) {
			var relationship = null;
			var labeledCell = [];
			var flagValidRelation=false;

			console.log("> relationParsedData.data[i_row]: " + relationParsedData.data[i_row]);

			// all columns
			for (var j_col=0; j_col<ParsedDataHeaders.length; j_col++) {
				labeledCell[ParsedDataHeaders[j_col]]=relationParsedData.data[i_row][j_col];
				debug? console.log(">> relationParsedData row " + i_row + " > " + relationParsedData.data[0][j_col] + " = " + relationParsedData.data[i_row][j_col]) : true;
			}

			// Select the relationship with GEMMA Object id.
			debug? console.log(">> Find relation with Object ID == " + labeledCell["Object ID"]) : true;
			relationship = ObjectPropertyFind("relationship", "Object ID", labeledCell["Object ID"]);

			if (!relationship) { // if there is no relationship with the GEMMA Object ID
				// Select the relationship with the id.
				var selectID ="#" + labeledCell[relationshipMappings["id"]];
				debug? console.log(">> Find relationship with id == " + selectID) : true;
				relationship = $(selectID);

				if (!relationship||relationship.length<1) { // if there is no relationship with the id. Test length, object is not null??
					info? console.log(">> Relationship not found, creating relationship"):true;
					var source = null;
					var target = null;

					sourceResult = findImportElement(labeledCell, "Source Object ID", "Source ID", "Source label");
					targetResult = findImportElement(labeledCell, "Target Object ID", "Target ID", "Target label");

					source = sourceResult.vElement;
					target = targetResult.vElement;

					if (sourceResult.vFindImportText == "Not found") {
						console.log(">>>> Source not found : " + labeledCell[relationshipMappings["source.name"]]);
						flagValidRelation=false;
					} else {
						info?console.log(">> Source : " + source):true;
						flagValidRelation=true;
					}
					if (targetResult.vFindImportText == "Not found") {
						console.log(">>>> Target not found : " + labeledCell[relationshipMappings["target.name"]]);
						flagValidRelation=false;
					} else {
						info?console.log(">> Target : " + target):true;
						flagValidRelation=true;
					}
		
					if (flagValidRelation) {
						relationship = model.createRelationship(
							labeledCell[relationshipMappings["type"]],
							labeledCell[relationshipMappings["name"]],
							source,
							target);
							
						relationship.prop("Import", "Created at " + ImportDate);
						flagValidRelation=true;
					}
				} else {
					relationship.prop("Import", "Updated at " + ImportDate + ": Found with ID");
					flagValidRelation=true;
				}
			} else {
				relationship.prop("Import", "Updated at " + ImportDate + ": Found with Object ID");
				flagValidRelation=true;
			}

			if (flagValidRelation) {
				relationship.name			=labeledCell[relationshipMappings["name"]];
				relationship.documentation	=labeledCell[relationshipMappings["documentation"]];
				relationship.type			=labeledCell[relationshipMappings["type"]];
	
				for (var j_col=relationshipHeaders.length; j_col<ParsedDataHeaders.length; j_col++) {
					if (labeledCell[ParsedDataHeaders[j_col]]) {
						relationship.prop(ParsedDataHeaders[j_col],labeledCell[ParsedDataHeaders[j_col]]);
					}
				}
				info? console.log(">> relationship : " + relationship):true;
			} else {
				debug?console.log(">> relationship ignored :" +
					labeledCell[relationshipMappings["source.name"]] + 
					" <-> " +
					labeledCell[relationshipMappings["target.name"]] ):true;
			}
			debug?console.log(">> ======== " ):true;
		}
		console.log("> Parsing Complete")
	}
	catch (error) {
		console.log("> Error: " + error.message);
		console.log("> Relationship : " + relationship);
	}
} else {
	console.log("> No CSV with relations");
}
