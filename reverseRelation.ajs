/**
 * reverseRelation
 *
 * Change the direction of a relation by switching source and target
 *
 * The applyToModelContent function allows for multiple kinds of selections
 *
 */

load(__DIR__ + "_lib/Common.js");
load(__DIR__ + "_lib/SelectCollection.js");

initConsoleLog(__FILE__, true);

let collection = selectConcepts($(selection));
// collection.each((obj) => plotAttributeID(obj));
applyToCollection(collection.filter("relation"), reverseRelation);

finishConsoleLog();

/********************************************
 * function definitions
 *******************************************/
function reverseRelation(obj) {
	_commonShowDebugMessage.push(false);

	debug(`obj.id: ${obj.id}`);
	debug(`obj.concept.id: ${obj.concept.id}`);

	source = obj.source;
	target = obj.target;
	// check if reversed relation is allowed
	if ($.model.isAllowedRelationship(obj.type, target.type, source.type)) {
		// the order of switching source and target is relevant
		// a relation connected twice with a relation is not allowed (in Archi or in ArchiMate)
		if (source.type.endsWith("relationship")) {
			debug(`\tSet target first, source is a ${source}`);
			obj.source = target;
			obj.target = source;
		} else {
			if (target.type.endsWith("relationship")) {
				debug(`\tSet source first, target is a ${target}`);
			}
			obj.target = source;
			obj.source = target;
		}
		console.log(`>> ${getRelationString(obj)}`);
	} else {
		console.log(`>> Not allowed: ${getRelationString(obj)}`);
	}
	_commonShowDebugMessage.pop();
}

function getRelationString(rel) {
	let relationString = `${rel.type}`;

	if (rel.type == "access-relationship" && rel.accessType) {
		relationString += `(${rel.accessType})`;
	}
	if (rel.type == "influence-relationship" && rel.influenceStrength) {
		relationString += `(${rel.influenceStrength})`;
	}
	if (rel.type == "association-relationship" && rel.associationDirected) {
		relationString += `(${rel.associationDirected})`;
	}

	let relationName = rel.name ? `[${rel.name}]` : "[no name]";
	let sourceName = rel.source.type.endsWith("relationship") ? rel.source : rel.source.name;
	let targetName = rel.target.type.endsWith("relationship") ? rel.target : rel.target.name;
	relationString += `: ${sourceName} -${relationName}-> ${targetName}`;

	return relationString;
}
