/**
 * Genereer de views van de GGM data-objecten en de GEMMA bedrijfsobjecten
 *
 * Configuratie van de te genereren views in
 * - GGM/user_parameter/ggmDO.js en
 * - GGM/user_parameter/ggmBO.js
 *
 * Hoe te gebruiken:
 * - selecteer één of meerdere Beleidsdomeinen
 * - draai dit script
 *
 * Dit script
 * - genereert van ieder beleidsdomein een view van de data-objecten en een view van de bedrijfsobjecten
 * - styled de views
 * - set de eigenschappen van de views
 */
load("../_lib/Common.js");
initConsoleLog(__FILE__, true);

load("../_lib/selection.js");
load("../_lib/archi_folders.js");
load("../View/include_view.js");
load("include_ggm_gemma.js");

const FOLDER_SYNC_GGM_VIEWS = FOLDER_SYNC_GGM + "/GGM naar GEMMA";

try {
  let Beleidsdomeinen = getSelection($(selection), "grouping")
  Beleidsdomeinen = Beleidsdomeinen.filter((grouping) => grouping.prop("GEMMA type") == "Beleidsdomein");
  if (Beleidsdomeinen.size() < 1) {
    // Beleidsdomeinen = $("grouping").filter((grouping) => grouping.prop("GEMMA type") == "Beleidsdomein");
    console.log("Selecteer de folder beleidsdomeinen of één of meer beleidsdomeinen");
  }

  console.log(`Maak of update de views voor ${Beleidsdomeinen.size()} beleidsdomeinen\n`);
  // voorkom dat in visueel beleidsdomein de embedded objecten worden gebruikt als start voor de views
  let drawCollection = $();
  Beleidsdomeinen.each((bd) => drawCollection.add(concept(bd)));

  console.log(`Genereer GGM data-object views`);
  console.log(`==============================`);
  let param = read_user_parameter(__FILE__, "ggmDO", "GenerateMultiple", "LR");
  param.viewFolder = FOLDER_GGM_DATAOBJECT;
  param.viewNameSuffix = VIEW_NAME_SUFFIX;
  let folderGGM = getFolderPath("/Views" + param.viewFolder);

  generate_view(param, drawCollection);

  console.log();
  console.log(`Genereer GEMMA bedrijfsobjectmodellen`);
  console.log(`=====================================`);
  param = read_user_parameter(__FILE__, "ggmBO", "GenerateMultiple", "LR");
  param.viewFolder = FOLDER_SYNC_GGM_VIEWS + FOLDER_BEDRIJFSOBJECT;
  let folderGEMMA = getFolderPath("/Views" + param.viewFolder);

  generate_view(param, drawCollection);

  console.log(`\nStyling, labels and properties`);
  console.log(`==============================`);
  [folderGGM, folderGEMMA].forEach((folder) => {
    console.log(`\n${folder}`);
    console.log("-".repeat(`\n${folder}`.length));
    let views = $(folder).children("view");

    // styling
    styleView(views);

    // toon label Beleidsdomein voor data- of bedrijfsobjecten die niet in een Beleidsdomein zijn genest
    console.log();
    let notNestedElements = getSelection($(folder), "view").children("element").not("grouping");
    applyToCollection(notNestedElements, setLabelBeleidsdomein);

    // Update view properties
    console.log("\nUpdate view properties");
    views.each((view) => updateViewProp(view));
  });

  console.log();
} catch (error) {
  console.log(`> ${typeof error.stack == "undefined" ? error : error.stack}`);
}

finishConsoleLog();