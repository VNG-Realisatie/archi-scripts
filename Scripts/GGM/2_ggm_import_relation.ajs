/**
 * Import van de GGM relaties
 *
 * Specificatie CSV-bestanden
 * - https://github.com/VNG-Realisatie/GEMMA-GGM-Archi-repository/tree/develop/CSV%20export
 *
 * Voordat dit script gedraaid wordt:
 * - maak een Archi compatible versie van de GGM csv met LibreOffice calc
 * - de GGM data-objecten moeten ingelezen zijn
 *
 * Dit script leest de GGM relaties
 * - associaties en specialisaties tussen data-objecten
 */
load(__DIR__ + "../_lib/Common.js");
initConsoleLog(__FILE__, true);

load("../_lib/archi_folders.js");
load("include_ggm_gemma.js");
// Overrule PROP_ID: vind bestaande relaties met PROP_GGM_ID_IMPORTED ipv Object ID
var PROP_ID = PROP_GGM_ID_IMPORTED;
load(__DIR__ + "../ImportExport_CSV/include_import.js");

try {

  let importFile = GGM_CONVERTED_RELATIONS;
  if (!importFile) {
    importFile = window.promptOpenFile({
      title: "Open GGM converted relations CSV",
      filterExtensions: ["*.csv"],
    });
  }
  if (!importFile) {
    console.log("> Canceled");
  } else {
    importObjects(importFile, ADD_SYNC_PROPERTIES);

    let dataobjectRelations = $(getFolderPath("/Relations"))
      .children("relationship")
      .filter((rel) => rel.prop(PROP_GGM_ID_IMPORTED) != undefined);
    let folderDataobjectRelations = getFolderPath("/Relations" + FOLDER_GGM_DATAOBJECT);

    console.log(`\n> move ${dataobjectRelations.size()} created relations to ${folderDataobjectRelations}`);

    // move added data-objectrelations
    dataobjectRelations.each((rel) => {
      // debug(`rel: ${rel}`)
      folderDataobjectRelations.add(rel);
    });

    // and set Object ID
    console.log(`> and set a property 'Object ID'`);
    dataobjectRelations.each((rel) => {
      if (!rel.prop("Object ID")) rel.prop("Object ID", generateUUID());
    });
  }
} catch (error) {
  console.log(`> ${typeof error.stack == "undefined" ? error : error.stack}`);
}
finishConsoleLog();
