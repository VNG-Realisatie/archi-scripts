/**
 * GEMMA GGM import
 * - import business-object relations from CSV
 *
 * Mapping specification, see
 *  https://github.com/VNG-Realisatie/GEMMA-GGM-Archi-repository/blob/develop/CSV%20export/Specificatie%20GGM-GEMMA%20data-uitwisseling.md
 */
load("../_lib/Common.js");
initConsoleLog(__FILE__);
load("include_ggm_gemma.js");
load("../ImportExport_CSV/include_export.js");
// load("../_lib/archi_folders.js");

// matchen op ID ggm-guid ipv Object ID
var PROP_ID = PROP_GGM_ID;
const GGM_REPO_CSV_DIR = "C:/Users/marks/Documents/Archi/model-repository/gemma-ggm-archi-repository/CSV export/";

/**
 * Mapping objects
 *  key=Archi property name
 *  value= CSV column header
 */
const BUSINESS_OBJECT_MAPPING = {
  // - id => Archi id is intern
  // - folder
  // - GGM-datum-tijd-export
  // - GGM-specialisaties
  // - GEMMA type
  // - Let op
  name: "GEMMA-naam",
  [PROP_GGM_NAAM]: PROP_GGM_NAAM,
  [PROP_ID]: "GEMMA-guid",
  [PROP_GGM_ID]: PROP_GGM_ID,
  type: "GEMMA-type",
  [PROP_GGM_UML_TYPE]: PROP_GGM_UML_TYPE,
  documentation: "GEMMA-definitie",
  [PROP_GGM_DEFINITIE]: PROP_GGM_DEFINITIE,
  Toelichting: "GEMMA-toelichting",
  [PROP_GGM_TOELICHTING]: PROP_GGM_TOELICHTING,
  Synoniemen: "GEMMA-synoniemen",
  [PROP_GGM_SYNONIEMEN]: PROP_GGM_SYNONIEMEN,
  Bron: "GEMMA-bron",
  [PROP_GGM_BRON]: PROP_GGM_BRON,
  [PROP_GEMMA_URL]: "GEMMA-URL", // correctie nav opm Arjen
  [PROP_ALTERNATE_NAME]: "GEMMA-alternate-name",
  [PROP_ADD]: { key: LABEL_DATUM_TIJD, value: getFormattedDateTime() }, // 
};
const BUSINESS_RELATION_MAPPING = {
  name: "GEMMA-naam",
  [PROP_GGM_NAAM]: PROP_GGM_NAAM,
  [PROP_ID]: "GEMMA-guid",
  [PROP_GGM_ID]: PROP_GGM_ID,
  type: "GEMMA-type",
  [PROP_GGM_UML_TYPE]: PROP_GGM_UML_TYPE,
  documentation: "GEMMA-definitie",
  [PROP_GGM_DEFINITIE]: PROP_GGM_DEFINITIE,
  Toelichting: "GEMMA-toelichting",
  [PROP_GGM_TOELICHTING]: PROP_GGM_TOELICHTING,
  // "source.name"	: 	",
  // "source.type"	: 	",
  // "target.name"	: 	",
  // "target.type"	: 	",
  // "source.id"	: 	",
  // "target.id"	: 	",
  "source.prop.Object ID": "GEMMA-source-guid",
  "target.prop.Object ID": "GEMMA-target-guid",
  // "accessType	: 	",
  // "associationDirected	: 	",
  // "influenceStrength	: 	",
  // "GGM-datum-tijd-export	: 	",
  // "Let op	: 	",
  [PROP_ADD]: { key: LABEL_DATUM_TIJD, value: getFormattedDateTime() },
};

try {
  let bedrijfsobjectenFolder = getFolderPath("/Business" + FOLDER_SYNC_GGM + FOLDER_BEDRIJFSOBJECT);
  let bedrijfsobjecten = $(bedrijfsobjectenFolder).children("business-object");
  // let bedrijfsobjecten = $(selection).filter("business-object")//.filter((obj) => obj.prop(PROP_GEMMA_TYPE) == GEMMA_TYPE_BEDRIJFSOBJECT);
  console.log(`Aantal bedrijfsobjecten: ${bedrijfsobjecten.size()}`);

  // let fileName = "GEMMA_Bedrijfsobjecten_element.csv";
  exportObjects(
    OBJECT_TYPE_ELEMENT,
    // GGM_CSV_DIR + "GEMMA_Bedrijfsobjecten_element.csv",
    GGM_REPO_CSV_DIR + "GEMMA_Bedrijfsobjecten_element.csv",
    BUSINESS_OBJECT_MAPPING,
    bedrijfsobjecten
  );

  // select all assignment en specialization-relations between business-objects
  let bedrijfsobjectRelations = bedrijfsobjecten.rels("association-relationship");
  console.log(`Aantal association-relationship: ${bedrijfsobjectRelations.size()}`);
  bedrijfsobjectRelations = bedrijfsobjectRelations.add(bedrijfsobjecten.rels("specialization-relationship"));
  console.log(`Aantal bedrijfsobjectRelations: ${bedrijfsobjectRelations.size()}`);

  // let fileName = "GEMMA_Bedrijfsobjecten_relatie.csv";
  exportObjects(
    OBJECT_TYPE_RELATION,
    // GGM_CSV_DIR + "GEMMA_Bedrijfsobjecten_relatie.csv",
    GGM_REPO_CSV_DIR + "GEMMA_Bedrijfsobjecten_relatie.csv",
    BUSINESS_RELATION_MAPPING,
    bedrijfsobjectRelations
  );
} catch (error) {
  console.log(`> ${typeof error.stack == "undefined" ? error : error.stack}`);
}

finishConsoleLog();

/**
 * GGM import mappings
 * - import GGM data-objects with 1_ggm_sync_from_csv.ajs
 * - import GGM data-objects relations with 2_ggm_import.ajs
 *
 * Import CSV-column mappings
 *  wordt nog niet gebruikt
 *  import nu met 1_ggm_sync
 */
const IMPORT_BUSINESS_OBJECT_MAPPING = {
  // not exported GEMMA properties
  // - id => Archi id is intern
  // - folder
  // - Alternate name
  // - GGM-datum-tijd-export
  // - GGM-specialisaties
  // - Let op
  [PROP_GGM_ID]: PROP_GGM_ID,
  "GEMMA-guid": "Object ID",
  [PROP_GGM_NAAM]: PROP_GGM_NAAM,
  "GEMMA-naam": "name",
  [PROP_GGM_UML_TYPE]: PROP_GGM_UML_TYPE,
  "GEMMA-type": "type",
  [PROP_GGM_DEFINITIE]: PROP_GGM_DEFINITIE,
  "GEMMA-definitie": "documentation",
  [PROP_GGM_TOELICHTING]: PROP_GGM_TOELICHTING,
  "GEMMA-toelichting": "Toelichting",
  [PROP_GGM_SYNONIEMEN]: PROP_GGM_SYNONIEMEN,
  "GEMMA-synoniemen": "Synoniemen",
  [PROP_GGM_BRON]: PROP_GGM_BRON,
  "GEMMA-bron": "Bron",
  ["GEMMA-URL"]: PROP_GEMMA_URL, // correctie nav opm Arjen
  [LABEL_DATUM_TIJD]: LABEL_DATUM_TIJD, // GGM export datumtijd
};

const IMPORT_RELATION_MAPPING = {
  // not exported GEMMA properties
  // - id => Archi id is intern
  // - folder
  // - Alternate name
  // - GGM-uml-type
  // - GGM-datum-tijd-export
  // - GGM-specialisaties
  // - Let op
  "GGM-guid": "GGM-guid",
  "GEMMA-guid": "Object ID",
  [PROP_GGM_NAAM]: PROP_GGM_NAAM,
  "GEMMA-naam": "name",
  [PROP_GGM_UML_TYPE]: PROP_GGM_UML_TYPE,
  [PROP_GEMMA_TYPE]: "type",
  [PROP_GGM_DEFINITIE]: PROP_GGM_DEFINITIE,
  "GEMMA-definitie": "documentation",
  [PROP_GGM_TOELICHTING]: PROP_GGM_TOELICHTING,
  "GEMMA-toelichting": "Toelichting",
  [PROP_GGM_SYNONIEMEN]: PROP_GGM_SYNONIEMEN,
  "GEMMA-synoniemen": "Synoniemen",
  [PROP_GGM_BRON]: PROP_GGM_BRON,
  "GEMMA-bron": "Bron",
  [PROP_GEMMA_URL]: PROP_GEMMA_URL,
  [LABEL_DATUM_TIJD]: LABEL_DATUM_TIJD, // GGM export datumtijd
};

// 10-04-2024 17:11:29
function getFormattedDateTime() {
  const now = new Date();

  const day = now.getDate().toString().padStart(2, "0");
  const month = (now.getMonth() + 1).toString().padStart(2, "0"); // getMonth() is 0-indexed
  const year = now.getFullYear();

  const hours = now.getHours().toString().padStart(2, "0");
  const minutes = now.getMinutes().toString().padStart(2, "0");
  const seconds = now.getSeconds().toString().padStart(2, "0");

  return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
}
