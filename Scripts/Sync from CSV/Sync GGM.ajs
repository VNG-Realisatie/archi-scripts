load(__DIR__ + "Include_LoadAndSync.js");

// Configuration starts here ======================================================================================

// Each source of information (data source) has its own object which contains:
// - The label describing the datasource (label)
// - The path of the CSV file (csv)
// - The ArchiMate concept type used when importing (targetType)
// - The function which extracts "logical" id from an ArchiMate element, or null if
//   element should be skipped (getId)
// - The function which stores external id into an ArchiMate element (setId)
// - The column name (or function) used to get (or compute) a unique id (id)
// - The column name (or function) used to get (or compute) element's name (name)
// - The column name (or function) used to get (or compute) element's documentation (documentation)
// - A mapping of external attributes to elements' properties (propMapping)
// - A description of external relations to map to ArchiMate relationships (relations)

/* Template
var xxx = {
  'label': '',
  'csv': __DIR__+'xxx.csv',
  'targetType': '',
  'targetFolder': getFolder('layer', 'folderName'),
  'getId': function(element) {
    // Do something to extract id
  },
  'setId': function(element, row) {
    // Do something to store id
  },
  'id': '', // Can also be a function
  'name': '', // Can also be a function
  'documentation': '', // Can also be a function
  'propMapping': {
    'Property_name': 'Column_name',
    'Property_name': 'Column_name'
  },
  'relations': {
    'Relation_Label': {               // can be changed, will be used in logs
      'column': '',                   // column name
      'reference': dataSourceObject,  // reference of the referenced data dource object
      'targetType': '',               // ArchiMate relationship type
                                      //  see https://github.com/archimatetool/archi-scripting-plugin/wiki/jArchi-Collection#object-selector-type
      'accessType': '',               // sets access type if targetType='access-relationship'
                                      //  see https://github.com/archimatetool/archi-scripting-plugin/wiki/jArchi-Object#accesstype
      'isReversed': true|false        // sets direction of the relationship
    },
    // You can add other relations if needed
  }
};
*/

/**
 * file: GGM Enterprise Architect CSV export
 *    C:/Users/marks/Vereniging van Nederlandse Gemeenten/Unit Architectuur en Standaarden - Documents/GEMMA ontwikkelstraat/GGM
 */


// C:/D-schijf/Data/Dropbox/KING/KING ICT/Archi/Werkbestanden/GGM
let GGM_csv_dir = __DIR__ + "../../../../Werkbestanden/GGM/Rondje/"
let GGM_objects = "ggm_export_objects_06112023-07_59_13.csv";
let GGM_relations = "ggm_export_relations_06112023-07_59_13.csv";

var iv3_domeinen = {
  label: "Iv3",
  csv: GGM_csv_dir + GGM_objects,
  targetType: "grouping",
  targetFolder: getFolder("Other", "domein iv3"),
  getId: function (element) {
    return element.prop("domein-iv3");
  },
  setId: function (element, row) {
    element.prop("domein-iv3", row["_id"]);
  },
  id: "domein-iv3",
  name: "domein-iv3",
  documentation: "",
  propMapping: {
    datumTijdExport: "datum-tijd-export",
  },
  relations: {},
};

var dataobjecten = {
  label: "Dataobject",
  csv: GGM_csv_dir + GGM_objects,
  targetType: "data-object",
  // filter: function (row) {
  //   return row["archimate-type"] != "Business object";
  // },
  targetFolder: getFolder("Application", "data-objecten (GGM)"),
  getId: function (element) {
    return element.prop("ggm-guid");
  },
  setId: function (element, row) {
    element.prop("ggm-guid", row["_id"]);
  },
  id: "ggm-guid",
  name: "naam",
  documentation: "definitie",
  propMapping: {
    "uml-type": "uml-type",
    "archimate-type": "archimate-type",
    // "gemma-guid": "gemma-guid",
    // "Object ID": function (row) {
		// 	if (row["ggm-guid"]) {
		// 		return  row["ggm-guid"].replace(/[\{\}]+/g, '');
		// 	}
		// },
    "ggm-guid": "ggm-guid",
    "bron": "bron",
    toelichting: "toelichting1",
    toelichting: "toelichting2",
    "synoniemen": "synoniemen",
    "domein-iv3": "domein-iv3",
    // "domein-dcat": "domein-dcat",
    // "domein-gemma": "domein-gemma",
    "datum-tijd-export": "datum-tijd-export",
  },
  relations: {
    iv3_domeinen_rel: {
      column: "domein-iv3",
      reference: iv3_domeinen,
      targetType: "aggregation-relationship",
      targetFolder: getFolder("Relations", "domein iv3 (GGM)"),
      isReversed: true,
    },
  },
};

// End of configuration =========================================================================================

// Things start here ============================================================================================
// Load data from CSV Files and sync model elements
console.show();
console.clear();
console.log(
  "Start of synchronization. If script doesn't ends with an 'End of synchronization' message, then check Archi error log in 'Help > About Archi > Installation Details > Configuration > View Error Log'"
);
var startTime = new Date().getTime();

loadAndSync(iv3_domeinen);
// syncModelRelationships(iv3_domeinen);

// loadAndSync(bedrijfsobjecten);
// syncModelRelationships(bedrijfsobjecten);

loadAndSync(dataobjecten);
syncModelRelationships(dataobjecten);

// loadAndSync(objectRelations);
// syncModelRelationships(objectRelations);

// Uncomment next line to enable tagging of concepts previously imported but no more present in current CSV files
tagDeletedConcepts();

var endTime = new Date().getTime();
console.log("Elapse time: ", (endTime - startTime) / 1000, " sec");
console.log("End of synchronization. Check previous messages for errors and undo in case of doubt.");
