/**
 * find_Id_or_Name_InModels.ajs
 *
 * Loop over all opened models
 * Find the objects with given search string in name, ID or property Object ID
 * Display the objects in a table
 *
 */

load(__DIR__ + "../_lib/Common.js");

initConsoleLog(__FILE__);

promptText = `Find objects in all opened models by "name", "id" or property "Object ID"\nYou can use wildcards for finding "name"`;
var searchString = window.prompt(promptText, "Enter name or ID");

try {
  if (searchString) {
    var loadedModelsList = $.model.getLoadedModels();

    // See https://www.npmjs.com/package/ascii-table
    load("https://unpkg.com/ascii-table/ascii-table.min.js");

    let table = new AsciiTable(`Search results for: ${searchString}`);
    table.setHeading("Model", "view", "Concept", "id", "Object ID");
    // table.setAlign(3, AsciiTable.CENTER);

    for (let i = 0; i < loadedModelsList.length; i++) {
      let addModelName = true; // flag for displaying the model name once in the table

      loadedModelsList[i].setAsCurrent();

      $("*").each(function (object) {
        let objectID = object.prop("Object ID");
        // Find the objects with given search string in name, ID or property Object ID
        if (matchRule(object.name, searchString) || object.id === searchString || objectID === searchString) {
          // tableWithObjects.push([addModelName ? model.name : "", "-", object, object.id, !objectID ? "-" : objectID]);
          table.addRow(addModelName ? model.name : "", "-", object, object.id, !objectID ? "-" : objectID);
          addModelName = false;
        }
      });

      $("view")
        .find()
        .each(function (visualObject) {
          // Find all visual objects with given search string in ID
          if (visualObject.id === searchString) {
            let objectID = visualObject.concept.prop("Object ID");
            table.addRow(
              addModelName ? model.name : "",
              visualObject.view.name,
              visualObject,
              visualObject.id,
              !objectID ? "-" : objectID
            );
            addModelName = false;
          }
        });
      if (addModelName) {
        // tableWithObjects.push([model.name, "-", "-", "", ""]);
        table.addRow(model.name, "-", "-", "", "");
      }
    }
    // console.log(table(tableWithObjects, { markdown: true }));
    // show settings in the console
    console.log(table.toString());
  } else {
    console.log("Cancelled");
  }
} catch (error) {
  console.log("> Error: " + error);
  console.log("> Stack: " + error.stack);
}

finishConsoleLog();

/**
 * "a*b" => everything that starts with "a" and ends with "b"
 * "a*" => everything that starts with "a"
 * "*b" => everything that ends with "b"
 * "*a*" => everything that has an "a" in it
 * "*a*b*"=> everything that has an "a" in it, followed by anything, followed by a "b", followed by anything
 * 
 * For explanation code see https://stackoverflow.com/questions/26246601/wildcard-string-comparison-in-javascript
 */
function matchRule(str, rule) {
  // var escapeRegex = (str) => str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
  var escapeRegex = (str) => str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
  return new RegExp("^" + rule.split("*").map(escapeRegex).join(".*") + "$", "i").test(str);
}