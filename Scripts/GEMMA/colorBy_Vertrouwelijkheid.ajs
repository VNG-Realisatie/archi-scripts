// chroma-js for all kinds of color conversions and color scales
// api docs https://gka.github.io/chroma.js/
load("https://unpkg.com/chroma-js");
load(__DIR__ + "../_lib/Common.js");
load(__DIR__ + "../_lib/selection.js");

initConsoleLog(__FILE__, true);

try {
	let collection = getVisualSelection($(selection), "application-component");
	applyToCollection(collection, ColorBy, ["Vertrouwelijkheid", "Blues"]);
} catch (error) {
	console.log(`> ${typeof error.stack == "undefined" ? error : error.stack}`);
}

finishConsoleLog();

/**
 * ColorByVertrouwelijkheid
 *	 Color elements of the same type by the value of a given property
 */
function ColorBy(obj, args) {
	let prop = args[0];
	let chromaColor = args[1];

	if (typeof this.only_once == "undefined") {
		this.colors = chroma.scale(chromaColor).padding([0.15, 0.3]);
		console.log(`Color elements with shades of ${chromaColor}, varied by the value of ${prop}`);
		this.only_once = true;
	}

	if (obj.prop(prop)) {
		console.log(`- ${obj.name}, view "${obj.view.name}", color by ${prop}=${obj.prop(prop)}`);
		colorShade = this.colors((obj.prop(prop) - 0.8) / 3);
		obj.fillColor = `${colorShade}`;
	} else {
		console.log(`> Skipped: ${obj}, view "${obj.view.name}"`);
	}
}
