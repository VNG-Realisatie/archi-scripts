/*
 * ObjectID_check
 * 
 * Version 1: Check all objects for duplicate "Object ID"
 * Version 2: Check all objects for valid "Object ID"
 * 	- must exist
 * 	- must be a valid GUID
 * 	- no duplicates
 * 
 * (c) 2019 Mark Backer
 *
 */

// Show output in the console
console.show();
console.clear();
var filepath = __FILE__.split("/");
var scriptName = filepath[filepath.length - 1];
console.log(`Executing script "${scriptName}"...\n`);

// Label of the property with the ID
var propertyID = "Object ID";

var emptyList = [];
var duplicatesList = [];
var unvalidGUIDList = [];
var indexMap = [];

// Too strict = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$', 'i');
var guid_pattern = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$', 'i');

// check all objects. Skip folders, properties of folders are not exported
$('*').not('folder').each(function (object) {

	// check for valid GUID
	if (guid_pattern.test(object.prop(propertyID)) === true) {

		// check for duplicate
		if (indexMap[object.prop(propertyID)]) {
			duplicatesList.push(`${object} with ${propertyID} = ${object.prop(propertyID)}`);
		} else { // add ID to indexMap
			indexMap[object.prop(propertyID)] = true;
		}
	} else {
		// check for empty Object ID
		if (object.prop(propertyID) == null) {
			emptyList.push(object);
		} else {
			unvalidGUIDList.push(object);
		}
	}
})

if (emptyList.length > 0) {
	console.log(`Objects without an ${propertyID}`);
	emptyList.sort();
	for (var i = 0; i < emptyList.length; i++) {
		console.log(`> ${emptyList[i]} with Archi id ${emptyList[i].id}`);
	}
}
if (duplicatesList.length > 0) {
	duplicatesList.sort();
	console.log(`Objects with duplicate ${propertyID}`);
	for (var i = 0; i < duplicatesList.length; i++) {
		console.log(`> ${duplicatesList[i]}`);
	}
}
if (unvalidGUIDList.length > 0) {
	unvalidGUIDList.sort();
	console.log(`Objects with unvalid GUIDs ${propertyID}`);
	for (var i = 0; i < unvalidGUIDList.length; i++) {
		console.log(`> ${unvalidGUIDList[i]}: ${propertyID}=${unvalidGUIDList[i].prop(propertyID)}`);
	}
}

console.log(`\nThere ${(emptyList.length == 1 ? "is" : "are")} ${emptyList.length} object without an ${propertyID}`);
console.log(`There ${(duplicatesList.length == 1 ? "is" : "are")} ${duplicatesList.length} object with a duplicate ${propertyID}`);
console.log(`There ${(unvalidGUIDList.length == 1 ? "is" : "are")} ${unvalidGUIDList.length} object with an unvalid GUID in ${propertyID}`);

console.log(`\nTo generate a new ${propertyID} for these objects:`);
console.log(`- remove the property ${propertyID}`);
console.log(`- run the script "ObjectID_set.ajs"`);

console.log(`\nScript "${scriptName}" finished`);