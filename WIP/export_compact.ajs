/**
/**
 * export_compact.ajs
 * 
 * Export Object_ID, id and other object properties of selection
 * The applyToModelContent function allows for multiple kinds of selections
 * 
 */
load(__DIR__ + "../_lib/papaparse.min.js");

load(__DIR__ + "../_lib/Common.ajs");
load(__DIR__ + "../_lib/ApplyToSelection.ajs");

_commonShowDebugMessage = [false];

const objectAttributes = ["id", "type", "name", "documentation"];
const endpoints = ["source", "target"];

var header = [];
var data = [];
var uniq = [];

initConsoleLog(__FILE__)

try {
	console.log('Exporting selected elements\n')
	applyToModelContent($(selection), elementData);

	console.log('\nExporting selected relations\n')
	applyToModelContent($(selection), relationData);

	let datum = new Date();
	let exportFile = window.promptSaveFile({
		title: "Export to CSV",
		filterExtensions: ["*.csv"],
		fileName: `${datum.toLocaleDateString('nl-NL')} ${model.name}-${$(selection).first().name}.csv`
	});

	uniq = removeDuplicates(data, "id");

	console.log(`>> uniq.length: ${uniq.length}`)

	if (exportFile != null) {
		$.fs.writeFile(exportFile, Papa.unparse({ fields: header, data: uniq }));
		console.log("\nExported to : " + exportFile);
	} else {
		console.log("\nExport CSV canceled");
	}
} catch (error) {
	console.log(`> ${error}`);
}

finishConsoleLog()

/**
 * Remove duplicates from an array of objects
 * 
 * @param originalArray 
 * @param prop 
 */
function removeDuplicates(originalArray, prop) {
	var newArray = [];
	var lookupObject  = {};

	for (let i in originalArray) {
		if (lookupObject[originalArray[i][prop]] === undefined) {
			newArray.push(originalArray[i]);
		}
		lookupObject[originalArray[i][prop]] = originalArray[i];
	}
	return newArray;
}

  
/**
 * Fill header-row with labels, each label only once
 * @param pLabel 
 */
function headerLabel(pLabel) {
	if (typeof this.FlagFirstTime == 'undefined') {
		// JS functions are also objects -- which means they can have (static) properties
		this.FlagFirstTime = true;
		this.headerIndex = [];
	}

	if (!headerIndex[pLabel]) {
		this.header.push(pLabel);
		headerIndex[pLabel] = true;
	}
}

/**
 * Export an element as a csv row
 * 
 * @param pObject 
 */
function elementData(pObject) {
	let row = new Object;

	// >>>> apply to content moet altijd concept opleveren <<<<<<<<<<
	let selectedObject = concept(pObject);

	objectAttributes.forEach(function (attribute) {
		headerLabel(attribute)
		row[attribute] = selectedObject[attribute];
	})

	console.log(`>> ${selectedObject}`)
	selectedObject.prop().forEach(function (propertyLabel) {
		headerLabel(propertyLabel)

		if (selectedObject.prop(propertyLabel)) {
			row[propertyLabel] = selectedObject.prop(propertyLabel);
			debug(`>> Row[${propertyLabel}]: ${row[propertyLabel]}`);
		}
	})

	debug(`>> Row ${row}`)

	this.data.push(row)
}

/**
 * Export a relation as a csv row
 * 
 * @param pObject 
 */
function relationData(pObject) {
	let selectedObject = concept(pObject);

	// alle relaties
	// verwijder relaties met source of target die niet geselecteerd zijn (gaat niet vanuit applySelection)
	debug(`====`)
	console.log(`>> ${selectedObject}`)
	console.log(`>>> with relationships: ${$(selectedObject).outRels()}`)

	$(selectedObject).outRels().each(function (r) {
		let row = new Object;

		debug(`>>> export ${r}`)

		// export relation attributes
		objectAttributes.forEach(function (attribute) {
			headerLabel(attribute)

			debug(`>>>> Row[${attribute}] = ${r[attribute]}`)
			row[attribute] = `${r[attribute]}`;
		})

		// export relation properties
		r.prop().forEach(function (propertyLabel) {
			headerLabel(propertyLabel)

			if (r.prop(propertyLabel)) {
				row[propertyLabel] = r.prop(propertyLabel);
				debug(`>>>> Row[${propertyLabel}]: ${row[propertyLabel]}`);
			}
		})

		// export relation endpoint attributes
		ENDPOINT_LABELS.forEach(function (endpoint) {
			objectAttributes.forEach(function (attribute) {
				headerLabel(`${endpoint}.${attribute}`)

				row[`${endpoint}.${attribute}`] = r[endpoint][attribute];
				debug(`>>>> Row[${endpoint}.${attribute}]: ${r[endpoint][attribute]}`);
			})
		})

		debug(`>> Resulting Row ` + JSON.stringify(row))
		this.data.push(row)
	});
}

/**
 * Always return the concept, also if a diagram occurence is given
 */
function concept(o) {
	if (o.concept)
		return o.concept;
	else
		return o;
}