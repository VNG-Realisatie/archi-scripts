/**
 * importElement.ajs
 * 
 * import elements from a CSV file
 * 
 */
load(__DIR__ + "../_lib/papaparse.min.js");
load(__DIR__ + "../_lib/Common.js");
load(__DIR__ + "export_import_functions.js");

_commonShowDebugMessage = [true];

initConsoleLog(__FILE__)

try {
	console.log(`Importing ${OBJECT_TYPE}s of CSV\n`)

	// var filePath = window.promptOpenFile({ title: "Open CSV" , filterExtensions: ["*.CSV"], fileName: "*.csv" });
	var filePath = 'C:/D-schijf/Data/Dropbox/KING/KING ICT/Archi/Werkbestanden/ExportImport/2021-02-25 UPL-Default View-elements.csv'
	const rows = loadFile(filePath)

	const relationRows = rows.filter(row => row['type'].endsWith("relationship"))
	const elementRows = rows.filter(row => !row['type'].endsWith("relationship") && row['type'] != 'archimate-diagram-model')
	const viewRows = rows.filter(row => row['type'] == 'archimate-diagram-model')

	
	// try to find a concept for every row
	const indexedRows = relationRows.map((row, index) => indexRowsWithObjects(row, index, OBJECT_TYPE_RELATION))
	console.log(`\nScanned ${indexedRows.length} rows`)
	indexedRows.map(indexedRow => debug(`object=${indexedRow.object} ==> action is "${indexedRow.resultCode}" with row[${indexedRow.index}]`))

	createObjects = indexedRows.filter(indexedRow => indexedRow.resultCode == CREATE_NEW_OBJECT)
	createLog = createObjects.map(indexedRow => importCreateObject(indexedRow))
	createLog.map(line => console.log(line))

	updateObjects = indexedRows.filter(indexedRow => (indexedRow.resultCode == FOUND_PROP_ID) || (indexedRow.resultCode == FOUND_ID) || (indexedRow.resultCode == FOUND_NAME))
	updateLog = updateObjects.map(indexedRow => importUpdateObject(indexedRow)).filter(line => line != '')
	if (updateLog.length > 0) {
		console.log(`Updated ${updateLog.length} objects:`)
		updateLog.map(line => console.log(line))
	}


	console.log("\n>> ======== ");
	console.log(">> Import finished");
	console.log(`>>> rows processed : ${rows.length}`);
	console.log(`>>> elements updated   : ${updateLog.length}`);
	console.log(`>>> elements created   : ${createObjects.length}`);
	console.log("");

} catch (error) {
	console.log(`> ${typeof error.stack == 'undefined' ? error : error.stack}`);
}

finishConsoleLog()
