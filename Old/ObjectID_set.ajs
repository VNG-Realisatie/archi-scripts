/*
 * ObjectID_set
 * 
 * Alle objecten in het GEMMA architectuurmodel bevatten verplicht een property "Object ID". 
 * Deze property zorgt ervoor dat alle objecten in alle tools beschikken over een niet wijzigend ID.
 * (met name BiZZdesign neemt genereert in een exportbestand altijd weer nieuwe id's, ook neemt BD geen id's over bij het importeren)
 * 
 * Version 1: 
 * - Check all objects for empty property "Object ID"
 * - if empty set to id
 * Version 2: 26-05-2020
 * - if Object ID is not a valid GUID, try to set it with a GUID derived from the id
 * 		- if id is a valid GUID => set Object ID to id
 *  	- if id is a known Archi id => set Object ID to stripped Archi id
 *  	- if id doesn't contain a valid GUID => set Object ID to a generated GUID
 * 
 * This is used in conjunction with the php script replace_id_with_ObjectID.php to support:
 * - Archi roundtripping between .archimate and Open Exchange XML files is possible without changing id's
 * - Archi id are a GUID prefixed with an 'underscore'
 * - if Archi id is not valid, it's replace with an Object ID
 * 
 * (c) 2019 Mark Backer
 *
 */

// Show output in the console
console.show();
console.clear();
var filepath = __FILE__.split("/");
var scriptName = filepath[filepath.length - 1];

console.log(`Executing script "${scriptName}"...\n`);

// Label of the property with the ID
var propertyID = "Object ID";

var counter_total = 0;
var counter_ObjectID_empty = 0;
var counter_ObjectID_valid = 0;
var counter_archi_id_pattern = 0;
var counter_guid_pattern = 0;
var counter_archi_underscore_pattern = 0;
var counter_generated = 0;

// Too strict 		>>  new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$', 'i');
// Still too strict >>  new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$', 'i');
var guid_pattern 			= new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', 'i');
var guid_pattern_SWC 		= new RegExp('^[0-9a-f]{32}$', 'i');
var guid_pattern_SWC_pv 	= new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}-pv$', 'i');
var guid_pattern_SWC_view	= new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{10}$', 'i');
var archi_underscore_pattern = new RegExp('^_[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$', 'i');
var archi_id_pattern = new RegExp('^id-[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[0-9a-f]{4}[0-9a-f]{12}$', 'i');

// loop over all objects. Skip folders, properties of folders are not exported
$('*').not('folder').each(function (object) {
	let ObjectID = object.prop(propertyID)
	let id = object.id
	let validFlag = false;

	// check if object ID is valid
	if ((guid_pattern.test(object.prop(propertyID)) === true) || 
		(guid_pattern_SWC.test(object.prop(propertyID)) === true) ||
		(guid_pattern_SWC_view.test(object.prop(propertyID)) === true) ||
		(guid_pattern_SWC_pv.test(object.prop(propertyID)) === true)) {
		counter_ObjectID_valid++;
	} else { // set the Object ID to a valid GUID
		// Count empty Object ID for statistics reporting
		if (ObjectID == null ) {
			counter_ObjectID_empty++;
			console.log(`> Empty ${propertyID}: ${object}`);
		} else {
			console.log(`> Unvalid ${propertyID}: ${object}, ${propertyID} = ${object.prop(propertyID)}`);
		}

		// id prefixed with 'id-' (true for archi 4.7 and higher)
		if (archi_id_pattern.test(id) === true) {
			let vObjectID = `${id.substr(3,8)}-${id.substr(11,4)}-${id.substr(15,4)}-${id.substr(19,4)}-${id.substr(23,12)}`;
			object.prop(propertyID, vObjectID);
			console.log(`>> ${propertyID} created from Archi id > ${vObjectID}`);
			counter_archi_id_pattern++;
		} else {
			// id is a valid guid (true for archi up to version 4.6)
			if (guid_pattern.test(id) === true) {
				object.prop(propertyID, id);
				console.log(`>> ${propertyID} created from Archi GUID id > ${id}`);
				counter_guid_pattern++;
			} else {
				// id prefixed with  underscore (true for archi 4.7 beta version)
				if (archi_underscore_pattern.test(id) === true) {
					object.prop(propertyID, id.substr(1));
					console.log(`>> ${propertyID} created from Archi underscore id > ${id.substr(1)}`);
					counter_archi_underscore_pattern++;
				} else {
					// unknown id format, generate guid
					let id_generated = generateUUID()
					object.prop(propertyID, id_generated);
					console.log(`>> ${propertyID} set to generated UUID > ${id_generated}`);
					counter_generated++;
				}
			}
		}
	}
	counter_total++;
})

console.log();
console.log(`Number of processed objects and views: \t${counter_total}`);
console.log(`Number objects with unvalid ${propertyID}: \t${counter_total - counter_ObjectID_valid}`);
console.log(`- number with empty ${propertyID}: \t${counter_ObjectID_empty}`);
console.log(`GUID for set ${propertyID}:`);
console.log(`- Archi id (prefix 'id-') copied to ${propertyID}: \t${counter_archi_id_pattern}`);
console.log(`- Archi id (prefix '_') copied to ${propertyID}: \t${counter_archi_underscore_pattern}`);
console.log(`- Archi id (valid GUID) copied to ${propertyID}: \t${counter_guid_pattern}`);
console.log(`- GUID generated for ${propertyID}: \t${counter_generated}\n`);

console.log(`Script "${scriptName}" finished\n`);

// https://stackoverflow.com/questions/105034/how-to-create-guid-uuid
function generateUUID() { // Public Domain/MIT
	var d = new Date().getTime(); //Timestamp
	return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
		var r = Math.random() * 16; //random number between 0 and 16
		r = (d + r) % 16 | 0;
		d = Math.floor(d / 16);
		return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
	});
}