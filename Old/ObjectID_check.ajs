/*
 * ObjectID_check
 * 
 * Version 1: Check all objects for duplicate "Object ID"
 * Version 2: Check all objects for valid "Object ID"
 * 	- must exist
 * 	- must be a valid GUID
 * 	- no duplicates
 * 
 * (c) 2019 Mark Backer
 *
 */

// Show output in the console
console.show();
console.clear();
var filepath = __FILE__.split("/");
var scriptName = filepath[filepath.length - 1];
console.log(`Executing script "${scriptName}"...\n`);

// Label of the property with the ID
var propertyID = "Object ID";

var emptyReport = [];
var duplicatesReport = [];
var unvalidReport = [];

var SWCGUIDList = [];
var SWC_pvGUIDList = [];
var SWC_viewGUIDList = [];
var indexMap = [];

// Too strict = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$', 'i');
var guid_pattern 			= new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', 'i');
var guid_pattern_SWC 		= new RegExp('^[0-9a-f]{32}$', 'i');
var guid_pattern_SWC_pv 	= new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}-pv$', 'i');
var guid_pattern_SWC_view	= new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{10}$', 'i');

// check all objects. Skip folders, properties of folders are not exported
$('*').not('folder').each(function (object) {

	// check for valid GUID
	if ((guid_pattern.test(object.prop(propertyID)) === true) || 
		(guid_pattern_SWC.test(object.prop(propertyID)) === true) ||
		(guid_pattern_SWC_view.test(object.prop(propertyID)) === true) ||
		(guid_pattern_SWC_pv.test(object.prop(propertyID)) === true)) {

		if (guid_pattern_SWC.test(object.prop(propertyID)) === true) {
			SWCGUIDList.push(object);
		} else {
			if (guid_pattern_SWC_pv.test(object.prop(propertyID)) === true) {
				SWC_pvGUIDList.push(object);
			} else {
				if (guid_pattern_SWC_view.test(object.prop(propertyID)) === true) {
					SWC_viewGUIDList.push(object);
				}
			}
		}

		// check for duplicate
		if (indexMap[object.prop(propertyID)]) {
			duplicatesReport.push(`${object} with ${propertyID} = ${object.prop(propertyID)}`);
		} else { // add ID to indexMap
			indexMap[object.prop(propertyID)] = true;
		}
	} else {
		// check for empty Object ID
		if (object.prop(propertyID) == null) {
			emptyReport.push(object);
		} else {
			unvalidReport.push(object);
		}
	}
})

if (emptyReport.length > 0) {
	console.log(`Objects without an ${propertyID}`);
	emptyReport.sort();
	for (var i = 0; i < emptyReport.length; i++) {
		console.log(`> ${emptyReport[i]} with Archi id ${emptyReport[i].id}`);
	}
}
if (duplicatesReport.length > 0) {
	duplicatesReport.sort();
	console.log(`Objects with duplicate ${propertyID}`);
	for (var i = 0; i < duplicatesReport.length; i++) {
		console.log(`> ${duplicatesReport[i]}`);
	}
}
if (unvalidReport.length > 0) {
	unvalidReport.sort();
	console.log(`Objects with unvalid GUIDs ${propertyID}`);
	for (var i = 0; i < unvalidReport.length; i++) {
		console.log(`> ${unvalidReport[i]}: ${propertyID}=${unvalidReport[i].prop(propertyID)}`);
	}
}

console.log(`There ${(SWCGUIDList.length == 1 ? "is" : "are")} ${SWCGUIDList.length} object with SWC format GUID in ${propertyID}`);
console.log(`There ${(SWC_pvGUIDList.length == 1 ? "is" : "are")} ${SWC_pvGUIDList.length} object with SWC pakketversie GUID in ${propertyID}`);
console.log(`There ${(SWC_viewGUIDList.length == 1 ? "is" : "are")} ${SWC_viewGUIDList.length} object with SWC view GUID in ${propertyID}\n`);

console.log(`\nThere ${(emptyReport.length == 1 ? "is" : "are")} ${emptyReport.length} object without an ${propertyID}`);
console.log(`There ${(duplicatesReport.length == 1 ? "is" : "are")} ${duplicatesReport.length} object with a duplicate ${propertyID}`);
console.log(`There ${(unvalidReport.length == 1 ? "is" : "are")} ${unvalidReport.length} object with an unvalid GUID in ${propertyID}`);

console.log(`\nTo generate a new ${propertyID} for duplicate or unvalid objects:`);
console.log(`- remove the property ${propertyID}`);
console.log(`- run the script "ObjectID_set.ajs"`);

console.log(`\nScript "${scriptName}" finished`);