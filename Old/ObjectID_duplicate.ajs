/*
 * ObjectID_duplicate
 * 
 * Version 1: Check all objects for duplicate "Object ID"
 * 
 * (c) 2019 Mark Backer
 *
 */

// Show output in the console
console.show();
console.clear();
var filepath = __FILE__.split("/");
var scriptName = filepath[filepath.length - 1];
console.log(`Executing script "${scriptName}"...\n`);

// label_ID_property for finding existing elements
var label_ID_property = "Object ID";
var emptyList = [];
var duplicatesList = [];

// check all concepts
$('concept').each(function (concept) {
	check_duplicatie_ID_property(concept, duplicatesList, emptyList);
})

// chack all views
$('view').each(function (view) {
	check_duplicatie_ID_property(view, duplicatesList, emptyList);
})

if (emptyList.length > 0) {
	console.log(`There ${(emptyList.length == 1 ? "is" : "are")} ${emptyList.length} object with no valid [${label_ID_property}]`);
	emptyList.sort();
	for (var i = 0; i < emptyList.length; i++) {
		console.log(`> ${emptyList[i]}`);
	}
	console.log(`\nTo create valid ${label_ID_property} properties:`);
	console.log(`- run the script "ObjectID_empty.ajs"`);
}

if (duplicatesList.length > 0) {
	console.log(`There ${(duplicatesList.length == 1 ? "is" : "are")} ${duplicatesList.length} object with duplicate [${label_ID_property}] found`);
	duplicatesList.sort();
	for (var i = 0; i < duplicatesList.length; i++) {
		console.log(`> ${duplicatesList[i]}`);
	}
	console.log(`\nTo generate a new [${label_ID_property}] for these objects:`);
	console.log(`- remove the property [${label_ID_property}]`);
	console.log(`- run the script "ObjectID_empty.ajs"`);
} else {
	console.log(`\nNo duplicates found :)`);
}

console.log(`\nScript "${scriptName}" finished`);

/**
 * 
 * @param pObject match object with index. if found 
 */
function check_duplicatie_ID_property(pObject, pDuplicatesList, pEmptyList) {
	// initialize with selection of property en property values
	if (typeof this.indexMap == 'undefined') {
		// JS functions are also objects -- which means they can have (static) properties
		this.indexMap = [];
		this.i = 0;
		this.j = 0;
	}

	// check for duplicate
	if (this.indexMap[pObject.prop(label_ID_property)]) {
		if (pObject.prop(label_ID_property) == null) {
			pEmptyList[this.j] = pObject;
			this.j++
		} else {
			pDuplicatesList[this.i] = `[${pObject}] with [${label_ID_property}] = ${pObject.prop(label_ID_property)}`;
			this.i++;
		}
	} else { // add ID to indexMap
		this.indexMap[pObject.prop(label_ID_property)] = true;
	}
}