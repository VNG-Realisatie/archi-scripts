/**
 * deleteDuplicateRelations
 * 
 *  Definition of duplicate relation
 *      - duplicate source and target object
 *      - duplicate name (often empty)
 *      - duplicate type
 * 
 *  - Find all relations with duplicate
 *  - Merge relations
 *      Existing diagram instances of the other relation will be replaced with this relation
 *      Documentatation of the other relation is appended to this relation's documentation
 *      Properites of the other are appended to this relation's properties
 *      The other relation is deleted
 * 
 */

console.clear();
let RelationsSet = new Set()

function deleteDuplicateRelations() {

    console.log("Starting function deleteDuplicateRelations");

    $("element").each(function (e) {
        // Get all relationships of the element (not only the occurrences on the view)
        $(e).outRels().each(function (r) {
            duplicateRelationColl = 


            var DupRel = getDuplicateRelationString(r)
 
            if RelationsSet.has(DupRel) {

            } else {
                RelationsSet.add(DupRel);
            }

            if ($(e).objectRefs().isEmpty()) {
                console.log("Deleting unused element: " + e.name);
                e.delete();
            }
        });

        console.log("Ending function deleteDuplicateRelations");

    }

function getDuplicateRelationString (pRelation) {
    var DuplicateRelationString = `${pRelation.source.id} - ${pRelation.type} - ${pRelation.name} - ${pRelation.target.id}`;
    if (pRelation.type == 'access-relationship') {
        DuplicateRelationString += ` - ${pRelation.accessType}`;
    }
    if (pRelation.type == 'influence-relationship') {
        DuplicateRelationString += ` - ${pRelation.influenceStrength}`;
    }
    if (pRelation.type == 'association-relationship') {
        DuplicateRelationString += ` - ${pRelation.associationDirected}`;
    }
    return DuplicateRelationString
}

deleteDuplicateRelations();